{
  "version": 3,
  "file": "ghost-dev.js",
  "sources": [
    ".tmp/ember-transpiled/adapters/application.js",
    ".tmp/ember-transpiled/adapters/embedded-relation-adapter.js",
    ".tmp/ember-transpiled/adapters/post.js",
    ".tmp/ember-transpiled/adapters/setting.js",
    ".tmp/ember-transpiled/adapters/user.js",
    ".tmp/ember-transpiled/app.js",
    ".tmp/ember-transpiled/assets/lib/touch-editor.js",
    ".tmp/ember-transpiled/assets/lib/uploader.js",
    ".tmp/ember-transpiled/components/gh-activating-list-item.js",
    ".tmp/ember-transpiled/components/gh-blur-input.js",
    ".tmp/ember-transpiled/components/gh-codemirror.js",
    ".tmp/ember-transpiled/components/gh-file-upload.js",
    ".tmp/ember-transpiled/components/gh-form.js",
    ".tmp/ember-transpiled/components/gh-markdown.js",
    ".tmp/ember-transpiled/components/gh-modal-dialog.js",
    ".tmp/ember-transpiled/components/gh-notification.js",
    ".tmp/ember-transpiled/components/gh-notifications.js",
    ".tmp/ember-transpiled/components/gh-popover-button.js",
    ".tmp/ember-transpiled/components/gh-popover.js",
    ".tmp/ember-transpiled/components/gh-role-selector.js",
    ".tmp/ember-transpiled/components/gh-select.js",
    ".tmp/ember-transpiled/components/gh-trim-focus-input.js",
    ".tmp/ember-transpiled/components/gh-upload-modal.js",
    ".tmp/ember-transpiled/config.js",
    ".tmp/ember-transpiled/controllers/application.js",
    ".tmp/ember-transpiled/controllers/debug.js",
    ".tmp/ember-transpiled/controllers/editor/edit.js",
    ".tmp/ember-transpiled/controllers/editor/new.js",
    ".tmp/ember-transpiled/controllers/error.js",
    ".tmp/ember-transpiled/controllers/forgotten.js",
    ".tmp/ember-transpiled/controllers/modals/delete-all.js",
    ".tmp/ember-transpiled/controllers/modals/delete-post.js",
    ".tmp/ember-transpiled/controllers/modals/delete-user.js",
    ".tmp/ember-transpiled/controllers/modals/invite-new-user.js",
    ".tmp/ember-transpiled/controllers/modals/leave-editor.js",
    ".tmp/ember-transpiled/controllers/modals/transfer-owner.js",
    ".tmp/ember-transpiled/controllers/modals/upload.js",
    ".tmp/ember-transpiled/controllers/post-settings-menu.js",
    ".tmp/ember-transpiled/controllers/post-tags-input.js",
    ".tmp/ember-transpiled/controllers/posts.js",
    ".tmp/ember-transpiled/controllers/posts/post.js",
    ".tmp/ember-transpiled/controllers/reset.js",
    ".tmp/ember-transpiled/controllers/settings.js",
    ".tmp/ember-transpiled/controllers/settings/app.js",
    ".tmp/ember-transpiled/controllers/settings/general.js",
    ".tmp/ember-transpiled/controllers/settings/users/index.js",
    ".tmp/ember-transpiled/controllers/settings/users/user.js",
    ".tmp/ember-transpiled/controllers/setup.js",
    ".tmp/ember-transpiled/controllers/signin.js",
    ".tmp/ember-transpiled/controllers/signup.js",
    ".tmp/ember-transpiled/helpers/gh-blog-url.js",
    ".tmp/ember-transpiled/helpers/gh-count-characters.js",
    ".tmp/ember-transpiled/helpers/gh-count-words.js",
    ".tmp/ember-transpiled/helpers/gh-format-html.js",
    ".tmp/ember-transpiled/helpers/gh-format-markdown.js",
    ".tmp/ember-transpiled/helpers/gh-format-timeago.js",
    ".tmp/ember-transpiled/initializers/authentication.js",
    ".tmp/ember-transpiled/initializers/ghost-config.js",
    ".tmp/ember-transpiled/initializers/ghost-paths.js",
    ".tmp/ember-transpiled/initializers/notifications.js",
    ".tmp/ember-transpiled/initializers/popover.js",
    ".tmp/ember-transpiled/initializers/store-injector.js",
    ".tmp/ember-transpiled/initializers/trailing-history.js",
    ".tmp/ember-transpiled/mixins/body-event-listener.js",
    ".tmp/ember-transpiled/mixins/current-user-settings.js",
    ".tmp/ember-transpiled/mixins/editor-base-controller.js",
    ".tmp/ember-transpiled/mixins/editor-base-view.js",
    ".tmp/ember-transpiled/mixins/editor-route-base.js",
    ".tmp/ember-transpiled/mixins/loading-indicator.js",
    ".tmp/ember-transpiled/mixins/marker-manager.js",
    ".tmp/ember-transpiled/mixins/nprogress-save.js",
    ".tmp/ember-transpiled/mixins/pagination-controller.js",
    ".tmp/ember-transpiled/mixins/pagination-route.js",
    ".tmp/ember-transpiled/mixins/pagination-view-infinite-scroll.js",
    ".tmp/ember-transpiled/mixins/popover-mixin.js",
    ".tmp/ember-transpiled/mixins/selective-save.js",
    ".tmp/ember-transpiled/mixins/shortcuts-route.js",
    ".tmp/ember-transpiled/mixins/style-body.js",
    ".tmp/ember-transpiled/mixins/validation-engine.js",
    ".tmp/ember-transpiled/models/notification.js",
    ".tmp/ember-transpiled/models/post.js",
    ".tmp/ember-transpiled/models/role.js",
    ".tmp/ember-transpiled/models/setting.js",
    ".tmp/ember-transpiled/models/slug-generator.js",
    ".tmp/ember-transpiled/models/tag.js",
    ".tmp/ember-transpiled/models/user.js",
    ".tmp/ember-transpiled/router.js",
    ".tmp/ember-transpiled/routes/application.js",
    ".tmp/ember-transpiled/routes/content.js",
    ".tmp/ember-transpiled/routes/debug.js",
    ".tmp/ember-transpiled/routes/editor/edit.js",
    ".tmp/ember-transpiled/routes/editor/index.js",
    ".tmp/ember-transpiled/routes/editor/new.js",
    ".tmp/ember-transpiled/routes/error404.js",
    ".tmp/ember-transpiled/routes/forgotten.js",
    ".tmp/ember-transpiled/routes/posts.js",
    ".tmp/ember-transpiled/routes/posts/index.js",
    ".tmp/ember-transpiled/routes/posts/post.js",
    ".tmp/ember-transpiled/routes/reset.js",
    ".tmp/ember-transpiled/routes/settings.js",
    ".tmp/ember-transpiled/routes/settings/apps.js",
    ".tmp/ember-transpiled/routes/settings/general.js",
    ".tmp/ember-transpiled/routes/settings/index.js",
    ".tmp/ember-transpiled/routes/settings/users.js",
    ".tmp/ember-transpiled/routes/settings/users/index.js",
    ".tmp/ember-transpiled/routes/settings/users/user.js",
    ".tmp/ember-transpiled/routes/setup.js",
    ".tmp/ember-transpiled/routes/signin.js",
    ".tmp/ember-transpiled/routes/signout.js",
    ".tmp/ember-transpiled/routes/signup.js",
    ".tmp/ember-transpiled/serializers/application.js",
    ".tmp/ember-transpiled/serializers/post.js",
    ".tmp/ember-transpiled/serializers/setting.js",
    ".tmp/ember-transpiled/serializers/user.js",
    ".tmp/ember-transpiled/transforms/moment-date.js",
    ".tmp/ember-transpiled/utils/ajax.js",
    ".tmp/ember-transpiled/utils/bound-one-way.js",
    ".tmp/ember-transpiled/utils/caja-sanitizers.js",
    ".tmp/ember-transpiled/utils/codemirror-mobile.js",
    ".tmp/ember-transpiled/utils/codemirror-shortcuts.js",
    ".tmp/ember-transpiled/utils/date-formatting.js",
    ".tmp/ember-transpiled/utils/editor-shortcuts.js",
    ".tmp/ember-transpiled/utils/ghost-paths.js",
    ".tmp/ember-transpiled/utils/link-view.js",
    ".tmp/ember-transpiled/utils/mobile.js",
    ".tmp/ember-transpiled/utils/notifications.js",
    ".tmp/ember-transpiled/utils/set-scroll-classname.js",
    ".tmp/ember-transpiled/utils/text-field.js",
    ".tmp/ember-transpiled/utils/titleize.js",
    ".tmp/ember-transpiled/utils/validator-extensions.js",
    ".tmp/ember-transpiled/utils/word-count.js",
    ".tmp/ember-transpiled/validators/forgotten.js",
    ".tmp/ember-transpiled/validators/new-user.js",
    ".tmp/ember-transpiled/validators/post.js",
    ".tmp/ember-transpiled/validators/reset.js",
    ".tmp/ember-transpiled/validators/setting.js",
    ".tmp/ember-transpiled/validators/setup.js",
    ".tmp/ember-transpiled/validators/signin.js",
    ".tmp/ember-transpiled/validators/signup.js",
    ".tmp/ember-transpiled/validators/user.js",
    ".tmp/ember-transpiled/views/application.js",
    ".tmp/ember-transpiled/views/content-list-content-view.js",
    ".tmp/ember-transpiled/views/content-preview-content-view.js",
    ".tmp/ember-transpiled/views/editor-save-button.js",
    ".tmp/ember-transpiled/views/editor/edit.js",
    ".tmp/ember-transpiled/views/editor/new.js",
    ".tmp/ember-transpiled/views/item-view.js",
    ".tmp/ember-transpiled/views/post-item-view.js",
    ".tmp/ember-transpiled/views/post-settings-menu-view.js",
    ".tmp/ember-transpiled/views/post-tags-input.js",
    ".tmp/ember-transpiled/views/posts.js",
    ".tmp/ember-transpiled/views/settings.js",
    ".tmp/ember-transpiled/views/settings/apps.js",
    ".tmp/ember-transpiled/views/settings/content-base.js",
    ".tmp/ember-transpiled/views/settings/general.js",
    ".tmp/ember-transpiled/views/settings/index.js",
    ".tmp/ember-transpiled/views/settings/users.js",
    ".tmp/ember-transpiled/views/settings/users/user.js",
    ".tmp/ember-transpiled/views/settings/users/users-list-view.js",
    "core/client/loader.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrvzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnxnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvhlMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnptBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjjrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACftGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA,sD",
  "sourcesContent": [
    "define(\"ghost/adapters/application\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ghostPaths = __dependency1__[\"default\"];\n\n    var ApplicationAdapter = DS.RESTAdapter.extend({\n        host: window.location.origin,\n        namespace: ghostPaths().apiRoot.slice(1),\n\n        findQuery: function (store, type, query) {\n            var id;\n\n            if (query.id) {\n                id = query.id;\n                delete query.id;\n            }\n\n            return this.ajax(this.buildURL(type.typeKey, id), 'GET', { data: query });\n        },\n\n        buildURL: function (type, id) {\n            // Ensure trailing slashes\n            var url = this._super(type, id);\n\n            if (url.slice(-1) !== '/') {\n                url += '/';\n            }\n\n            return url;\n        },\n\n        // Override deleteRecord to disregard the response body on 2xx responses.\n        // This is currently needed because the API is returning status 200 along\n        // with the JSON object for the deleted entity and Ember expects an empty\n        // response body for successful DELETEs.\n        // Non-2xx (failure) responses will still work correctly as Ember will turn\n        // them into rejected promises.\n        deleteRecord: function () {\n            var response = this._super.apply(this, arguments);\n\n            return response.then(function () {\n                return null;\n            });\n        }\n    });\n\n    __exports__[\"default\"] = ApplicationAdapter;\n  });",
    "define(\"ghost/adapters/embedded-relation-adapter\", \n  [\"ghost/adapters/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationAdapter = __dependency1__[\"default\"];\n\n    // EmbeddedRelationAdapter will augment the query object in calls made to\n    // DS.Store#find, findQuery, and findAll with the correct \"includes\"\n    // (?include=relatedType) by introspecting on the provided subclass of the DS.Model.\n    //\n    // Example:\n    // If a model has an embedded hasMany relation, the related type will be included:\n    // roles: DS.hasMany('role', { embedded: 'always' }) => ?include=roles\n\n    var EmbeddedRelationAdapter = ApplicationAdapter.extend({\n        find: function (store, type, id) {\n            return this.findQuery(store, type, this.buildQuery(store, type, id));\n        },\n\n        findQuery: function (store, type, query) {\n            return this._super(store, type, this.buildQuery(store, type, query));\n        },\n\n        findAll: function (store, type, sinceToken) {\n            return this.findQuery(store, type, this.buildQuery(store, type, sinceToken));\n        },\n\n        buildQuery: function (store, type, options) {\n            var model,\n                toInclude = [],\n                query = {},\n                deDupe = {};\n\n            // Get the class responsible for creating records of this type\n            model = store.modelFor(type);\n\n            // Iterate through the model's relationships and build a list\n            // of those that need to be pulled in via \"include\" from the API\n            model.eachRelationship(function (name, meta) {\n                if (meta.kind === 'hasMany' &&\n                    Object.prototype.hasOwnProperty.call(meta.options, 'embedded') &&\n                    meta.options.embedded === 'always') {\n\n                    toInclude.push(name);\n                }\n            });\n\n            if (toInclude.length) {\n                // If this is a find by id, build a query object and attach the includes\n                if (typeof options === 'string' || typeof options === 'number') {\n                    query.id = options;\n                    query.include = toInclude.join(',');\n                }\n                // If this is a find all (no existing query object) build one and attach\n                // the includes.\n                // If this is a find with an existing query object then merge the includes\n                // into the existing object. Existing properties and includes are preserved. \n                else if (typeof options === 'object' || Ember.isNone(options)) {\n                    query = options || query;\n                    toInclude = toInclude.concat(query.include ? query.include.split(',') : []);\n\n                    toInclude.forEach(function (include) {\n                        deDupe[include] = true;\n                    });\n\n                    query.include = Object.keys(deDupe).join(',');\n                }\n            }\n\n            return query;\n        }\n    });\n\n    __exports__[\"default\"] = EmbeddedRelationAdapter;\n  });",
    "define(\"ghost/adapters/post\", \n  [\"ghost/adapters/embedded-relation-adapter\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmbeddedRelationAdapter = __dependency1__[\"default\"];\n\n    var PostAdapter = EmbeddedRelationAdapter.extend({\n        createRecord: function (store, type, record) {\n            var data = {},\n                serializer = store.serializerFor(type.typeKey),\n                url = this.buildURL(type.typeKey);\n\n            // make the server return with the tags embedded\n            url = url + '?include=tags';\n\n            // use the PostSerializer to transform the model back into\n            // an array with a post object like the API expects\n            serializer.serializeIntoHash(data, type, record);\n\n            return this.ajax(url, 'POST', { data: data });\n        },\n\n        updateRecord: function (store, type, record) {\n            var data = {},\n                serializer = store.serializerFor(type.typeKey),\n                id = Ember.get(record, 'id'),\n                url = this.buildURL(type.typeKey, id);\n\n            // make the server return with the tags embedded\n            url = url + '?include=tags';\n\n            // use the PostSerializer to transform the model back into\n            // an array of posts objects like the API expects\n            serializer.serializeIntoHash(data, type, record);\n\n            // use the ApplicationAdapter's buildURL method\n            return this.ajax(url, 'PUT', { data: data });\n        }\n    });\n\n    __exports__[\"default\"] = PostAdapter;\n  });",
    "define(\"ghost/adapters/setting\", \n  [\"ghost/adapters/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationAdapter = __dependency1__[\"default\"];\n\n    var SettingAdapter = ApplicationAdapter.extend({\n        updateRecord: function (store, type, record) {\n            var data = {},\n                serializer = store.serializerFor(type.typeKey);\n\n            // remove the fake id that we added onto the model.\n            delete record.id;\n\n            // use the SettingSerializer to transform the model back into\n            // an array of settings objects like the API expects\n            serializer.serializeIntoHash(data, type, record);\n\n            // use the ApplicationAdapter's buildURL method but do not\n            // pass in an id.\n            return this.ajax(this.buildURL(type.typeKey), 'PUT', { data: data });\n        }\n    });\n\n    __exports__[\"default\"] = SettingAdapter;\n  });",
    "define(\"ghost/adapters/user\", \n  [\"ghost/adapters/embedded-relation-adapter\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmbeddedRelationAdapter = __dependency1__[\"default\"];\n\n    var UserAdapter = EmbeddedRelationAdapter.extend({\n        createRecord: function (store, type, record) {\n            var data = {},\n                serializer = store.serializerFor(type.typeKey),\n                url = this.buildURL(type.typeKey);\n\n            // Ask the API to include full role objects in its response\n            url += '?include=roles';\n\n            // Use the UserSerializer to transform the model back into\n            // an array of user objects like the API expects\n            serializer.serializeIntoHash(data, type, record);\n\n            // Use the url from the ApplicationAdapter's buildURL method\n            return this.ajax(url, 'POST', { data: data });\n        },\n\n        updateRecord: function (store, type, record) {\n            var data = {},\n                serializer = store.serializerFor(type.typeKey),\n                id = Ember.get(record, 'id'),\n                url = this.buildURL(type.typeKey, id);\n\n            // Ask the API to include full role objects in its response\n            url += '?include=roles';\n\n            // Use the UserSerializer to transform the model back into\n            // an array of user objects like the API expects\n            serializer.serializeIntoHash(data, type, record);\n\n            // Use the url from the ApplicationAdapter's buildURL method\n            return this.ajax(url, 'PUT', { data: data });\n        },\n\n        find: function (store, type, id) {\n            var url = this.buildQuery(store, type, id);\n            url.status = 'all';\n            return this.findQuery(store, type, url);\n        }\n    });\n\n    __exports__[\"default\"] = UserAdapter;\n  });",
    "define(\"ghost/app\", \n  [\"ember/resolver\",\"ember/load-initializers\",\"ghost/utils/link-view\",\"ghost/utils/text-field\",\"ghost/config\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var loadInitializers = __dependency2__[\"default\"];\n    var configureApp = __dependency5__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n        modulePrefix: 'ghost',\n        Resolver: Resolver['default']\n    });\n\n    // Runtime configuration of Ember.Application\n    configureApp(App);\n\n    loadInitializers(App, 'ghost');\n\n    __exports__[\"default\"] = App;\n  });",
    "define(\"ghost/assets/lib/touch-editor\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var createTouchEditor = function createTouchEditor() {\n        var noop = function () {},\n            TouchEditor;\n\n        TouchEditor = function (el, options) {\n            /*jshint unused:false*/\n            this.textarea = el;\n            this.win = { document : this.textarea };\n            this.ready = true;\n            this.wrapping = document.createElement('div');\n\n            var textareaParent = this.textarea.parentNode;\n            this.wrapping.appendChild(this.textarea);\n            textareaParent.appendChild(this.wrapping);\n\n            this.textarea.style.opacity = 1;\n        };\n\n        TouchEditor.prototype = {\n            setOption: function (type, handler) {\n                if (type === 'onChange') {\n                    $(this.textarea).change(handler);\n                }\n            },\n            eachLine: function () {\n                return [];\n            },\n            getValue: function () {\n                return this.textarea.value;\n            },\n            setValue: function (code) {\n                this.textarea.value = code;\n            },\n            focus: noop,\n            getCursor: function () {\n                return { line: 0, ch: 0 };\n            },\n            setCursor: noop,\n            currentLine: function () {\n                return 0;\n            },\n            cursorPosition: function () {\n                return { character: 0 };\n            },\n            addMarkdown: noop,\n            nthLine: noop,\n            refresh: noop,\n            selectLines: noop,\n            on: noop,\n            off: noop\n        };\n\n        return TouchEditor;\n    };\n\n    __exports__[\"default\"] = createTouchEditor;\n  });",
    "define(\"ghost/assets/lib/uploader\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ghostPaths = __dependency1__[\"default\"];\n\n    var UploadUi,\n        upload,\n        Ghost = ghostPaths();\n\n\n    UploadUi = function ($dropzone, settings) {\n        var $url = '<div class=\"js-url\"><input class=\"url js-upload-url\" type=\"url\" placeholder=\"http://\"/></div>',\n            $cancel = '<a class=\"image-cancel js-cancel\" title=\"Delete\"><span class=\"hidden\">Delete</span></a>',\n            $progress =  $('<div />', {\n                'class' : 'js-upload-progress progress progress-success active',\n                'role': 'progressbar',\n                'aria-valuemin': '0',\n                'aria-valuemax': '100'\n            }).append($('<div />', {\n                'class': 'js-upload-progress-bar bar',\n                'style': 'width:0%'\n            }));\n\n        $.extend(this, {\n            complete: function (result) {\n                var self = this;\n\n                function showImage(width, height) {\n                    $dropzone.find('img.js-upload-target').attr({'width': width, 'height': height}).css({'display': 'block'});\n                    $dropzone.find('.fileupload-loading').remove();\n                    $dropzone.css({'height': 'auto'});\n                    $dropzone.delay(250).animate({opacity: 100}, 1000, function () {\n                        $('.js-button-accept').prop('disabled', false);\n                        self.init();\n                    });\n                }\n\n                function animateDropzone($img) {\n                    $dropzone.animate({opacity: 0}, 250, function () {\n                        $dropzone.removeClass('image-uploader').addClass('pre-image-uploader');\n                        $dropzone.css({minHeight: 0});\n                        self.removeExtras();\n                        $dropzone.animate({height: $img.height()}, 250, function () {\n                            showImage($img.width(), $img.height());\n                        });\n                    });\n                }\n\n                function preLoadImage() {\n                    var $img = $dropzone.find('img.js-upload-target')\n                        .attr({'src': '', 'width': 'auto', 'height': 'auto'});\n\n                    $progress.animate({'opacity': 0}, 250, function () {\n                        $dropzone.find('span.media').after('<img class=\"fileupload-loading\"  src=\"' + Ghost.subdir + '/ghost/img/loadingcat.gif\" />');\n                        if (!settings.editor) {$progress.find('.fileupload-loading').css({'top': '56px'}); }\n                    });\n                    $dropzone.trigger('uploadsuccess', [result]);\n                    $img.one('load', function () {\n                        animateDropzone($img);\n                    }).attr('src', result);\n                }\n                preLoadImage();\n            },\n\n            bindFileUpload: function () {\n                var self = this;\n\n                $dropzone.find('.js-fileupload').fileupload().fileupload('option', {\n                    url: Ghost.subdir + '/ghost/api/v0.1/uploads/',\n                    add: function (e, data) {\n                        /*jshint unused:false*/\n                        $('.js-button-accept').prop('disabled', true);\n                        $dropzone.find('.js-fileupload').removeClass('right');\n                        $dropzone.find('.js-url').remove();\n                        $progress.find('.js-upload-progress-bar').removeClass('fail');\n                        $dropzone.trigger('uploadstart', [$dropzone.attr('id')]);\n                        $dropzone.find('span.media, div.description, a.image-url, a.image-webcam')\n                            .animate({opacity: 0}, 250, function () {\n                                $dropzone.find('div.description').hide().css({'opacity': 100});\n                                if (settings.progressbar) {\n                                    $dropzone.find('div.js-fail').after($progress);\n                                    $progress.animate({opacity: 100}, 250);\n                                }\n                                data.submit();\n                            });\n                    },\n                    dropZone: settings.fileStorage ? $dropzone : null,\n                    progressall: function (e, data) {\n                        /*jshint unused:false*/\n                        var progress = parseInt(data.loaded / data.total * 100, 10);\n                        if (!settings.editor) {$progress.find('div.js-progress').css({'position': 'absolute', 'top': '40px'}); }\n                        if (settings.progressbar) {\n                            $dropzone.trigger('uploadprogress', [progress, data]);\n                            $progress.find('.js-upload-progress-bar').css('width', progress + '%');\n                        }\n                    },\n                    fail: function (e, data) {\n                        /*jshint unused:false*/\n                        $('.js-button-accept').prop('disabled', false);\n                        $dropzone.trigger('uploadfailure', [data.result]);\n                        $dropzone.find('.js-upload-progress-bar').addClass('fail');\n                        if (data.jqXHR.status === 413) {\n                            $dropzone.find('div.js-fail').text('The image you uploaded was larger than the maximum file size your server allows.');\n                        } else if (data.jqXHR.status === 415) {\n                            $dropzone.find('div.js-fail').text('The image type you uploaded is not supported. Please use .PNG, .JPG, .GIF, .SVG.');\n                        } else {\n                            $dropzone.find('div.js-fail').text('Something went wrong :(');\n                        }\n                        $dropzone.find('div.js-fail, button.js-fail').fadeIn(1500);\n                        $dropzone.find('button.js-fail').on('click', function () {\n                            $dropzone.css({minHeight: 0});\n                            $dropzone.find('div.description').show();\n                            self.removeExtras();\n                            self.init();\n                        });\n                    },\n                    done: function (e, data) {\n                        /*jshint unused:false*/\n                        self.complete(data.result);\n                    }\n                });\n            },\n\n            buildExtras: function () {\n                if (!$dropzone.find('span.media')[0]) {\n                    $dropzone.prepend('<span class=\"media\"><span class=\"hidden\">Image Upload</span></span>');\n                }\n                if (!$dropzone.find('div.description')[0]) {\n                    $dropzone.append('<div class=\"description\">Add image</div>');\n                }\n                if (!$dropzone.find('div.js-fail')[0]) {\n                    $dropzone.append('<div class=\"js-fail failed\" style=\"display: none\">Something went wrong :(</div>');\n                }\n                if (!$dropzone.find('button.js-fail')[0]) {\n                    $dropzone.append('<button class=\"js-fail button-add\" style=\"display: none\">Try Again</button>');\n                }\n                if (!$dropzone.find('a.image-url')[0]) {\n                    $dropzone.append('<a class=\"image-url\" title=\"Add image from URL\"><span class=\"hidden\">URL</span></a>');\n                }\n    //                if (!$dropzone.find('a.image-webcam')[0]) {\n    //                    $dropzone.append('<a class=\"image-webcam\" title=\"Add image from webcam\"><span class=\"hidden\">Webcam</span></a>');\n    //                }\n            },\n\n            removeExtras: function () {\n                $dropzone.find('span.media, div.js-upload-progress, a.image-url, a.image-upload, a.image-webcam, div.js-fail, button.js-fail, a.js-cancel').remove();\n            },\n\n            initWithDropzone: function () {\n                var self = this;\n                //This is the start point if no image exists\n                $dropzone.find('img.js-upload-target').css({'display': 'none'});\n                $dropzone.removeClass('pre-image-uploader image-uploader-url').addClass('image-uploader');\n                this.removeExtras();\n                this.buildExtras();\n                this.bindFileUpload();\n                if (!settings.fileStorage) {\n                    self.initUrl();\n                    return;\n                }\n                $dropzone.find('a.image-url').on('click', function () {\n                    self.initUrl();\n                });\n            },\n            initUrl: function () {\n                var self = this, val;\n                this.removeExtras();\n                $dropzone.addClass('image-uploader-url').removeClass('pre-image-uploader');\n                $dropzone.find('.js-fileupload').addClass('right');\n                if (settings.fileStorage) {\n                    $dropzone.append($cancel);\n                }\n                $dropzone.find('.js-cancel').on('click', function () {\n                    $dropzone.find('.js-url').remove();\n                    $dropzone.find('.js-fileupload').removeClass('right');\n                    self.removeExtras();\n                    self.initWithDropzone();\n                });\n\n                $dropzone.find('div.description').before($url);\n\n                if (settings.editor) {\n                    $dropzone.find('div.js-url').append('<button class=\"js-button-accept button-save\">Save</button>');\n                }\n\n                $dropzone.find('.js-button-accept').on('click', function () {\n                    val = $dropzone.find('.js-upload-url').val();\n                    $dropzone.find('div.description').hide();\n                    $dropzone.find('.js-fileupload').removeClass('right');\n                    $dropzone.find('.js-url').remove();\n                    if (val === '') {\n                        $dropzone.trigger('uploadsuccess', 'http://');\n                        self.initWithDropzone();\n                    } else {\n                        self.complete(val);\n                    }\n                });\n\n                // Only show the toggle icon if there is a dropzone mode to go back to\n                if (settings.fileStorage !== false) {\n                    $dropzone.append('<a class=\"image-upload\" title=\"Add image\"><span class=\"hidden\">Upload</span></a>');\n                }\n\n                $dropzone.find('a.image-upload').on('click', function () {\n                    $dropzone.find('.js-url').remove();\n                    $dropzone.find('.js-fileupload').removeClass('right');\n                    self.initWithDropzone();\n                });\n\n            },\n            initWithImage: function () {\n                var self = this;\n                // This is the start point if an image already exists\n                $dropzone.removeClass('image-uploader image-uploader-url').addClass('pre-image-uploader');\n                $dropzone.find('div.description').hide();\n                $dropzone.append($cancel);\n                $dropzone.find('.js-cancel').on('click', function () {\n                    $dropzone.find('img.js-upload-target').attr({'src': ''});\n                    $dropzone.find('div.description').show();\n                    $dropzone.delay(2500).animate({opacity: 100}, 1000, function () {\n                        self.init();\n                    });\n\n                    $dropzone.trigger('uploadsuccess', 'http://');\n                    self.initWithDropzone();\n                });\n            },\n\n            init: function () {\n                var imageTarget = $dropzone.find('img.js-upload-target');\n                // First check if field image is defined by checking for js-upload-target class\n                if (!imageTarget[0]) {\n                    // This ensures there is an image we can hook into to display uploaded image\n                    $dropzone.prepend('<img class=\"js-upload-target\" style=\"display: none\"  src=\"\" />');\n                }\n                $('.js-button-accept').prop('disabled', false);\n                if (imageTarget.attr('src') === '' || imageTarget.attr('src') === undefined) {\n                    this.initWithDropzone();\n                } else {\n                    this.initWithImage();\n                }\n            }\n        });\n    };\n\n\n    upload = function (options) {\n        var settings = $.extend({\n            progressbar: true,\n            editor: false,\n            fileStorage: true\n        }, options);\n        return this.each(function () {\n            var $dropzone = $(this),\n                ui;\n\n            ui = new UploadUi($dropzone, settings);\n            ui.init();\n        });\n    };\n\n    __exports__[\"default\"] = upload;\n  });",
    "define(\"ghost/components/gh-activating-list-item\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ActivatingListItem = Ember.Component.extend({\n        tagName: 'li',\n        classNameBindings: ['active'],\n        active: false\n    });\n\n    __exports__[\"default\"] = ActivatingListItem;\n  });",
    "define(\"ghost/components/gh-blur-input\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var BlurInput = Ember.TextField.extend({\n        selectOnClick: false,\n        stopEnterKeyDownPropagation: false,\n        click: function (event) {\n            if (this.get('selectOnClick')) {\n                event.currentTarget.select();\n            }\n        },\n        focusOut: function () {\n            this.sendAction('action', this.get('value'));\n        },\n        keyDown: function (event) {\n            // stop event propagation when pressing \"enter\"\n            // most useful in the case when undesired (global) keyboard shortcuts are getting triggered while interacting\n            // with this particular input element.\n            if (this.get('stopEnterKeyDownPropagation') && event.keyCode === 13) {\n                event.stopPropagation();\n                return true;\n            }\n        }\n    });\n\n    __exports__[\"default\"] = BlurInput;\n  });",
    "define(\"ghost/components/gh-codemirror\", \n  [\"ghost/mixins/marker-manager\",\"ghost/utils/codemirror-mobile\",\"ghost/utils/set-scroll-classname\",\"ghost/utils/codemirror-shortcuts\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /*global CodeMirror */\n\n    var MarkerManager = __dependency1__[\"default\"];\n    var mobileCodeMirror = __dependency2__[\"default\"];\n    var setScrollClassName = __dependency3__[\"default\"];\n    var codeMirrorShortcuts = __dependency4__[\"default\"];\n\n    codeMirrorShortcuts.init();\n\n    var onChangeHandler = function (cm, changeObj) {\n        var line,\n            component = cm.component,\n            checkLine = _.bind(component.checkLine, component),\n            checkMarkers = _.bind(component.checkMarkers, component);\n\n        // fill array with a range of numbers\n        for (line = changeObj.from.line; line < changeObj.from.line + changeObj.text.length; line += 1) {\n            checkLine(line, changeObj.origin);\n        }\n\n        // Is this a line which may have had a marker on it?\n        checkMarkers();\n\n        cm.component.set('value', cm.getValue());\n    };\n\n    var onScrollHandler = function (cm) {\n        var scrollInfo = cm.getScrollInfo(),\n            component = cm.component;\n\n        scrollInfo.codemirror = cm;\n\n        // throttle scroll updates\n        component.throttle = Ember.run.throttle(component, function () {\n            this.set('scrollInfo', scrollInfo);\n        }, 10);\n    };\n\n    var Codemirror = Ember.TextArea.extend(MarkerManager, {\n        didInsertElement: function () {\n            Ember.run.scheduleOnce('afterRender', this, this.afterRenderEvent);\n        },\n\n        afterRenderEvent: function () {\n            var initMarkers = _.bind(this.initMarkers, this);\n\n            // Allow tabbing behaviour when viewing on small screen (not mobile)\n            $('#entry-markdown-header').on('click', function () {\n                $('.entry-markdown').addClass('active');\n                $('.entry-preview').removeClass('active');\n            });\n\n            $('#entry-preview-header').on('click', function () {\n                $('.entry-markdown').removeClass('active');\n                $('.entry-preview').addClass('active');\n            });\n\n            // replaces CodeMirror with TouchEditor only if we're on mobile\n            mobileCodeMirror.createIfMobile();\n\n            this.initCodemirror();\n            this.codemirror.eachLine(initMarkers);\n            this.sendAction('setCodeMirror', this);\n        },\n\n        // this needs to be placed on the 'afterRender' queue otherwise CodeMirror gets wonky\n        initCodemirror: function () {\n            // create codemirror\n            var codemirror = CodeMirror.fromTextArea(this.get('element'), {\n                mode:           'gfm',\n                tabMode:        'indent',\n                tabindex:       '2',\n                cursorScrollMargin: 10,\n                lineWrapping:   true,\n                dragDrop:       false,\n                extraKeys: {\n                    Home:   'goLineLeft',\n                    End:    'goLineRight'\n                }\n            });\n\n            codemirror.component = this; // save reference to this\n\n            // propagate changes to value property\n            codemirror.on('change', onChangeHandler);\n\n            // on scroll update scrollPosition property\n            codemirror.on('scroll', onScrollHandler);\n\n            codemirror.on('scroll', Ember.run.bind(Ember.$('.CodeMirror-scroll'), setScrollClassName, {\n                target: Ember.$('.entry-markdown'),\n                offset: 10\n            }));\n\n            this.set('codemirror', codemirror);\n        },\n\n        disableCodeMirror: function () {\n            var codemirror = this.get('codemirror');\n\n            codemirror.setOption('readOnly', 'nocursor');\n            codemirror.off('change', onChangeHandler);\n        },\n\n        enableCodeMirror: function () {\n            var codemirror = this.get('codemirror');\n\n            codemirror.setOption('readOnly', false);\n\n            // clicking the trash button on an image dropzone causes this function to fire.\n            // this line is a hack to prevent multiple event handlers from being attached.\n            codemirror.off('change', onChangeHandler);\n\n            codemirror.on('change', onChangeHandler);\n        },\n\n        removeThrottle: function () {\n            Ember.run.cancel(this.throttle);\n        }.on('willDestroyElement'),\n\n        removeCodemirrorHandlers: function () {\n            // not sure if this is needed.\n            var codemirror = this.get('codemirror');\n            codemirror.off('change', onChangeHandler);\n            codemirror.off('scroll');\n        }.on('willDestroyElement'),\n\n        clearMarkerManagerMarkers: function () {\n            this.clearMarkers();\n        }.on('willDestroyElement')\n    });\n\n    __exports__[\"default\"] = Codemirror;\n  });",
    "define(\"ghost/components/gh-file-upload\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var FileUpload = Ember.Component.extend({\n        _file: null,\n\n        uploadButtonText: 'Text',\n\n        uploadButtonDisabled: true,\n\n        change: function (event) {\n            this.set('uploadButtonDisabled', false);\n            this.sendAction('onAdd');\n            this._file = event.target.files[0];\n        },\n\n        onUpload: 'onUpload',\n\n        actions: {\n            upload: function () {\n                if (!this.uploadButtonDisabled && this._file) {\n                    this.sendAction('onUpload', this._file);\n                }\n\n                // Prevent double post by disabling the button.\n                this.set('uploadButtonDisabled', true);\n            }\n        }\n    });\n\n    __exports__[\"default\"] = FileUpload;\n  });",
    "define(\"ghost/components/gh-form\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Form = Ember.View.extend({\n        tagName: 'form',\n        attributeBindings: ['enctype'],\n        reset: function () {\n            this.$().get(0).reset();\n        },\n        didInsertElement: function () {\n            this.get('controller').on('reset', this, this.reset);\n        },\n        willClearRender: function () {\n            this.get('controller').off('reset', this, this.reset);\n        }\n    });\n\n    __exports__[\"default\"] = Form;\n  });",
    "define(\"ghost/components/gh-markdown\", \n  [\"ghost/assets/lib/uploader\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var uploader = __dependency1__[\"default\"];\n\n    var Markdown = Ember.Component.extend({\n        classNames: ['rendered-markdown'],\n\n        didInsertElement: function () {\n            this.set('scrollWrapper', this.$().closest('.entry-preview-content'));\n        },\n\n        adjustScrollPosition: function () {\n            var scrollWrapper = this.get('scrollWrapper'),\n                scrollPosition = this.get('scrollPosition');\n\n            scrollWrapper.scrollTop(scrollPosition);\n        }.observes('scrollPosition'),\n\n        // fire off 'enable' API function from uploadManager\n        // might need to make sure markdown has been processed first\n        reInitDropzones: function () {\n            Ember.run.scheduleOnce('afterRender', this, function () {\n                var dropzones = $('.js-drop-zone');\n\n                uploader.call(dropzones, {\n                    editor: true,\n                    fileStorage: this.get('config.fileStorage')\n                });\n\n                dropzones.on('uploadstart', _.bind(this.sendAction, this, 'uploadStarted'));\n                dropzones.on('uploadfailure', _.bind(this.sendAction, this, 'uploadFinished'));\n                dropzones.on('uploadsuccess', _.bind(this.sendAction, this, 'uploadFinished'));\n                dropzones.on('uploadsuccess', _.bind(this.sendAction, this, 'uploadSuccess'));\n            });\n        }.observes('markdown')\n    });\n\n    __exports__[\"default\"] = Markdown;\n  });",
    "define(\"ghost/components/gh-modal-dialog\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ModalDialog = Ember.Component.extend({\n        didInsertElement: function () {\n            this.$('#modal-container').fadeIn(50);\n\n            this.$('.modal-background').show().fadeIn(10, function () {\n                $(this).addClass('in');\n            });\n\n            this.$('.js-modal').addClass('in');\n        },\n\n        willDestroyElement: function () {\n\n            this.$('.js-modal').removeClass('in');\n\n            this.$('.modal-background').removeClass('in');\n\n            return this._super();\n        },\n\n        confirmaccept: 'confirmAccept',\n        confirmreject: 'confirmReject',\n\n        actions: {\n            closeModal: function () {\n                this.sendAction();\n            },\n            confirm: function (type) {\n                this.sendAction('confirm' + type);\n                this.sendAction();\n            }\n        },\n\n        klass: function () {\n            var classNames = [];\n\n            classNames.push(this.get('type') ? 'modal-' + this.get('type') : 'modal');\n\n            if (this.get('style')) {\n                this.get('style').split(',').forEach(function (style) {\n                    classNames.push('modal-style-' + style);\n                });\n            }\n\n            classNames.push(this.get('animation'));\n\n            return classNames.join(' ');\n        }.property('type', 'style', 'animation'),\n\n        acceptButtonClass: function () {\n            return this.get('confirm.accept.buttonClass') ? this.get('confirm.accept.buttonClass') : 'button-add';\n        }.property('confirm.accept.buttonClass'),\n\n        rejectButtonClass: function () {\n            return this.get('confirm.reject.buttonClass') ? this.get('confirm.reject.buttonClass') : 'button-delete';\n        }.property('confirm.reject.buttonClass')\n    });\n\n    __exports__[\"default\"] = ModalDialog;\n  });",
    "define(\"ghost/components/gh-notification\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NotificationComponent = Ember.Component.extend({\n        classNames: ['js-bb-notification'],\n\n        typeClass: function () {\n            var classes = '',\n                message = this.get('message'),\n                type,\n                dismissible;\n\n            // Check to see if we're working with a DS.Model or a plain JS object\n            if (typeof message.toJSON === 'function') {\n                type = message.get('type');\n                dismissible = message.get('dismissible');\n            }\n            else {\n                type = message.type;\n                dismissible = message.dismissible;\n            }\n\n            classes += 'notification-' + type;\n\n            if (type === 'success' && dismissible !== false) {\n                classes += ' notification-passive';\n            }\n\n            return classes;\n        }.property(),\n\n        didInsertElement: function () {\n            var self = this;\n\n            self.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {\n                /* jshint unused: false */\n                if (event.originalEvent.animationName === 'fade-out') {\n                    self.notifications.removeObject(self.get('message'));\n                }\n            });\n        },\n\n        actions: {\n            closeNotification: function () {\n                var self = this;\n                self.notifications.closeNotification(self.get('message'));\n            }\n        }\n    });\n\n    __exports__[\"default\"] = NotificationComponent;\n  });",
    "define(\"ghost/components/gh-notifications\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NotificationsComponent = Ember.Component.extend({\n        tagName: 'aside',\n        classNames: 'notifications',\n        classNameBindings: ['location'],\n\n        messages: Ember.computed.filter('notifications', function (notification) {\n            // If this instance of the notifications component has no location affinity\n            // then it gets all notifications\n            if (!this.get('location')) {\n                return true;\n            }\n\n            var displayLocation = (typeof notification.toJSON === 'function') ?\n                notification.get('location') : notification.location;\n\n            return this.get('location') === displayLocation;\n        }),\n\n        messageCountObserver: function () {\n            this.sendAction('notify', this.get('messages').length);\n        }.observes('messages.[]')\n    });\n\n    __exports__[\"default\"] = NotificationsComponent;\n  });",
    "define(\"ghost/components/gh-popover-button\", \n  [\"ghost/mixins/popover-mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PopoverMixin = __dependency1__[\"default\"];\n\n    var PopoverButton = Ember.Component.extend(PopoverMixin, {\n        tagName: 'button',\n        /*matches with the popover this button toggles*/\n        popoverName: null,\n        /*Notify popover service this popover should be toggled*/\n        click: function (event) {\n            this._super(event);\n            this.get('popover').togglePopover(this.get('popoverName'), this);\n        }\n    });\n\n    __exports__[\"default\"] = PopoverButton;\n  });",
    "define(\"ghost/components/gh-popover\", \n  [\"ghost/mixins/popover-mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PopoverMixin = __dependency1__[\"default\"];\n\n    var GhostPopover = Ember.Component.extend(PopoverMixin, {\n        classNames: 'ghost-popover fade-in',\n        name: null,\n        closeOnClick: false,\n        //Helps track the user re-opening the menu while it's fading out.\n        closing: false,\n\n        open: function () {\n            this.set('closing', false);\n            this.set('isOpen', true);\n            this.set('button.isOpen', true);\n        },\n        close: function () {\n            var self = this;\n            this.set('closing', true);\n            if (this.get('button')) {\n                this.set('button.isOpen', false);\n            }\n            this.$().fadeOut(200, function () {\n                //Make sure this wasn't an aborted fadeout by\n                //checking `closing`.\n                if (self.get('closing')) {\n                    self.set('isOpen', false);\n                    self.set('closing', false);\n                }\n            });\n        },\n        //Called by the popover service when any popover button is clicked.\n        toggle: function (options) {\n            var isClosing = this.get('closing'),\n                isOpen = this.get('isOpen'),\n                name = this.get('name'),\n                button = this.get('button'),\n                targetPopoverName = options.target;\n            \n            if (name === targetPopoverName && (!isOpen || isClosing)) {\n                if (!button) {\n                    button = options.button;\n                    this.set('button', button);\n                }\n                this.open();\n            } else if (isOpen) {\n                this.close();\n            }\n        },\n\n        click: function (event) {\n            this._super(event);\n            if (this.get('closeOnClick')) {\n                return this.close();\n            }\n        },\n\n        didInsertElement: function () {\n            this._super();\n            var popoverService = this.get('popover');\n\n            popoverService.on('close', this, this.close);\n            popoverService.on('toggle', this, this.toggle);\n        },\n        willDestroyElement: function () {\n            this._super();\n            var popoverService = this.get('popover');\n\n            popoverService.off('close', this, this.close);\n            popoverService.off('toggle', this, this.toggle);\n        }\n    });\n\n    __exports__[\"default\"] = GhostPopover;\n  });",
    "define(\"ghost/components/gh-role-selector\", \n  [\"ghost/components/gh-select\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var GhostSelect = __dependency1__[\"default\"];\n\n    var RolesSelector = GhostSelect.extend({\n        roles: Ember.computed.alias('options'),\n        options: Ember.computed(function () {\n            var rolesPromise = this.store.find('role', { permissions: 'assign' });\n\n            return Ember.ArrayProxy.extend(Ember.PromiseProxyMixin)\n                .create({promise: rolesPromise});\n        })\n    });\n\n    __exports__[\"default\"] = RolesSelector;\n  });",
    "define(\"ghost/components/gh-select\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    //GhostSelect is a solution to Ember.Select being evil and worthless.\n    // (Namely, this solves problems with async data in Ember.Select)\n    //Inspired by (that is, totally ripped off from) this JSBin\n    //http://emberjs.jsbin.com/rwjblue/40/edit\n\n    //Usage:\n    //Extend this component and create a template for your component.\n    //Your component must define the `options` property.\n    //Optionally use `initialValue` to set the object\n    //     you want to have selected to start with.\n    //Both options and initalValue are promise safe.\n    //Set onChange in your template to be the name\n    //    of the action you want called in your\n    //For an example, see gh-roles-selector\n\n    var GhostSelect = Ember.Component.extend({\n        tagName: 'span',\n        classNames: ['gh-select'],\n\n        options: null,\n        initialValue: null,\n\n        resolvedOptions: null,\n        resolvedInitialValue: null,\n\n        //Convert promises to their values\n        init: function () {\n            var self = this;\n            this._super.apply(this, arguments);\n\n            Ember.RSVP.hash({\n                resolvedOptions: this.get('options'),\n                resolvedInitialValue: this.get('initialValue')\n            }).then(function (resolvedHash) {\n                self.setProperties(resolvedHash);\n\n                //Run after render to ensure the <option>s have rendered\n                Ember.run.schedule('afterRender', function () {\n                    self.setInitialValue();\n                });\n            });\n        },\n\n        setInitialValue: function () {\n            var initialValue = this.get('resolvedInitialValue'),\n                options = this.get('resolvedOptions'),\n                initialValueIndex = options.indexOf(initialValue);\n            if (initialValueIndex > -1) {\n                this.$('option:eq(' + initialValueIndex + ')').prop('selected', true);\n            }\n        },\n        //Called by DOM events, weee!\n        change: function () {\n            this._changeSelection();\n        },\n        //Send value to specified action\n        _changeSelection: function () {\n            var value = this._selectedValue();\n            Ember.set(this, 'value', value);\n            this.sendAction('onChange', value);\n        },\n        _selectedValue: function () {\n            var selectedIndex = this.$('select')[0].selectedIndex;\n\n            return this.get('options').objectAt(selectedIndex);\n        }\n    });\n\n    __exports__[\"default\"] = GhostSelect;\n  });",
    "define(\"ghost/components/gh-trim-focus-input\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var TrimFocusInput = Ember.TextField.extend({\n        focus: true,\n\n        setFocus: function () {\n            if (this.focus) {\n                this.$().val(this.$().val()).focus();\n            }\n        }.on('didInsertElement'),\n\n        focusOut: function () {\n            var text = this.$().val();\n\n            this.$().val(text.trim());\n        }\n    });\n\n    __exports__[\"default\"] = TrimFocusInput;\n  });",
    "define(\"ghost/components/gh-upload-modal\", \n  [\"ghost/components/gh-modal-dialog\",\"ghost/assets/lib/uploader\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalDialog = __dependency1__[\"default\"];\n    var upload = __dependency2__[\"default\"];\n\n    var UploadModal = ModalDialog.extend({\n        layoutName: 'components/gh-modal-dialog',\n\n        didInsertElement: function () {\n            this._super();\n            upload.call(this.$('.js-drop-zone'), {fileStorage: this.get('config.fileStorage')});\n        },\n        confirm: {\n            reject: {\n                func: function () { // The function called on rejection\n                    return true;\n                },\n                buttonClass: true,\n                text: 'Cancel' // The reject button text\n            },\n            accept: {\n                buttonClass: 'button-save right',\n                text: 'Save', // The accept button texttext: 'Save'\n                func: function () {\n                    var imageType = 'model.' + this.get('imageType');\n\n                    if (this.$('.js-upload-url').val()) {\n                        this.set(imageType, this.$('.js-upload-url').val());\n                    } else {\n                        this.set(imageType, this.$('.js-upload-target').attr('src'));\n                    }\n                    return true;\n                }\n            }\n        },\n\n        actions: {\n            closeModal: function () {\n                this.sendAction();\n            },\n            confirm: function (type) {\n                var func = this.get('confirm.' + type + '.func');\n                if (typeof func === 'function') {\n                    func.apply(this);\n                }\n                this.sendAction();\n                this.sendAction('confirm' + type);\n            }\n        }\n    });\n\n    __exports__[\"default\"] = UploadModal;\n  });",
    "define(\"ghost/config\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function configureApp(App) {\n        if (!App instanceof Ember.Application) {\n            return;\n        }\n\n        App.reopen({\n            LOG_ACTIVE_GENERATION: true,\n            LOG_MODULE_RESOLVER: true,\n            LOG_TRANSITIONS: true,\n            LOG_TRANSITIONS_INTERNAL: true,\n            LOG_VIEW_LOOKUPS: true\n        });\n    }\n\n    __exports__[\"default\"] = configureApp;\n  });",
    "define(\"ghost/controllers/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ApplicationController = Ember.Controller.extend({\n        hideNav: Ember.computed.match('currentPath', /(error|signin|signup|setup|forgotten|reset)/),\n\n        topNotificationCount: 0,\n\n        actions: {\n            toggleMenu: function () {\n                this.toggleProperty('showMenu');\n            },\n\n            topNotificationChange: function (count) {\n                this.set('topNotificationCount', count);\n            }\n        }\n    });\n\n    __exports__[\"default\"] = ApplicationController;\n  });",
    "define(\"ghost/controllers/debug\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var DebugController = Ember.Controller.extend(Ember.Evented, {\n        uploadButtonText: 'Import',\n        importErrors: '',\n\n        actions: {\n            onUpload: function (file) {\n                var self = this,\n                    formData = new FormData();\n\n                this.set('uploadButtonText', 'Importing');\n                this.notifications.closePassive();\n\n                formData.append('importfile', file);\n\n                ic.ajax.request(this.get('ghostPaths.url').api('db'), {\n                    type: 'POST',\n                    data: formData,\n                    dataType: 'json',\n                    cache: false,\n                    contentType: false,\n                    processData: false\n                }).then(function () {\n                    self.notifications.showSuccess('Import successful.');\n                }).catch(function (response) {\n                    if (response && response.jqXHR && response.jqXHR.responseJSON && response.jqXHR.responseJSON.errors) {\n                        self.set('importErrors', response.jqXHR.responseJSON.errors);\n                    }\n                    self.notifications.showError('Import Failed');\n                }).finally(function () {\n                    self.set('uploadButtonText', 'Import');\n                    self.trigger('reset');\n                });\n            },\n\n            exportData: function () {\n                var iframe = $('#iframeDownload'),\n                    downloadURL = this.get('ghostPaths.url').api('db') +\n                        '?access_token=' + this.get('session.access_token');\n\n                if (iframe.length === 0) {\n                    iframe = $('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');\n                }\n\n                iframe.attr('src', downloadURL);\n            },\n\n            sendTestEmail: function () {\n                var self = this;\n\n                ic.ajax.request(this.get('ghostPaths.url').api('mail', 'test'), {\n                    type: 'POST'\n                }).then(function () {\n                    self.notifications.showSuccess('Check your email for the test message.');\n                }).catch(function (error) {\n                    if (typeof error.jqXHR !== 'undefined') {\n                        self.notifications.showAPIError(error);\n                    } else {\n                        self.notifications.showErrors(error);\n                    }\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = DebugController;\n  });",
    "define(\"ghost/controllers/editor/edit\", \n  [\"ghost/mixins/editor-base-controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EditorControllerMixin = __dependency1__[\"default\"];\n\n    var EditorEditController = Ember.ObjectController.extend(EditorControllerMixin);\n\n    __exports__[\"default\"] = EditorEditController;\n  });",
    "define(\"ghost/controllers/editor/new\", \n  [\"ghost/mixins/editor-base-controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EditorControllerMixin = __dependency1__[\"default\"];\n\n    var EditorNewController = Ember.ObjectController.extend(EditorControllerMixin, {\n        actions: {\n            /**\n              * Redirect to editor after the first save\n              */\n            save: function () {\n                var self = this;\n                this._super().then(function (model) {\n                    if (model.get('id')) {\n                        self.transitionToRoute('editor.edit', model);\n                    }\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = EditorNewController;\n  });",
    "define(\"ghost/controllers/error\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ErrorController = Ember.Controller.extend({\n        code: function () {\n            return this.get('content.status') > 200 ? this.get('content.status') : 500;\n        }.property('content.status'),\n        message: function () {\n            if (this.get('code') === 404) {\n                return 'No Ghost Found';\n            }\n\n            return this.get('content.statusText') !== 'error' ? this.get('content.statusText') : 'Internal Server Error';\n        }.property('content.statusText'),\n        stack: false\n    });\n\n    __exports__[\"default\"] = ErrorController;\n  });",
    "define(\"ghost/controllers/forgotten\", \n  [\"ghost/utils/ajax\",\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /* jshint unused: false */\r\n    var ajax = __dependency1__[\"default\"];\n\n    var ValidationEngine = __dependency2__[\"default\"];\n\n    \r\n    var ForgottenController = Ember.Controller.extend(ValidationEngine, {\r\n        email: '',\r\n        submitting: false,\r\n    \r\n        // ValidationEngine settings\r\n        validationType: 'forgotten',\r\n    \r\n        actions: {\r\n            submit: function () {\r\n                var self = this,\r\n                    data = self.getProperties('email');\r\n    \r\n                this.toggleProperty('submitting');\r\n                this.validate({ format: false }).then(function () {\r\n                    ajax({\r\n                        url: self.get('ghostPaths.url').api('authentication', 'passwordreset'),\r\n                        type: 'POST',\r\n                        data: {\r\n                            passwordreset: [{\r\n                                email: data.email\r\n                            }]\r\n                        }\r\n                    }).then(function (resp) {\r\n                        self.toggleProperty('submitting');\r\n                        self.notifications.showSuccess('Please check your email for instructions.', {delayed: true});\r\n                        self.set('email', '');\r\n                        self.transitionToRoute('signin');\r\n                    }).catch(function (resp) {\r\n                        self.toggleProperty('submitting');\r\n                        self.notifications.showAPIError(resp, { defaultErrorText: 'There was a problem logging in, please try again.' });\r\n                    });\r\n                }).catch(function (errors) {\r\n                    self.toggleProperty('submitting');\r\n                    self.notifications.showErrors(errors);\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ForgottenController;\n  });",
    "define(\"ghost/controllers/modals/delete-all\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var DeleteAllController = Ember.Controller.extend({\n        actions: {\n            confirmAccept: function () {\n                var self = this;\n\n                ic.ajax.request(this.get('ghostPaths.url').api('db'), {\n                    type: 'DELETE'\n                }).then(function () {\n                    self.notifications.showSuccess('All content deleted from database.');\n                }).catch(function (response) {\n                    self.notifications.showErrors(response);\n                });\n            },\n\n            confirmReject: function () {\n                return false;\n            }\n        },\n\n        confirm: {\n            accept: {\n                text: 'Delete',\n                buttonClass: 'button-delete'\n            },\n            reject: {\n                text: 'Cancel',\n                buttonClass: 'button'\n            }\n        }\n    });\n\n    __exports__[\"default\"] = DeleteAllController;\n  });",
    "define(\"ghost/controllers/modals/delete-post\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var DeletePostController = Ember.Controller.extend({\n        actions: {\n            confirmAccept: function () {\n                var self = this,\n                    model = this.get('model');\n\n                // definitely want to clear the data store and post of any unsaved, client-generated tags\n                model.updateTags();\n\n                model.destroyRecord().then(function () {\n                    self.get('popover').closePopovers();\n                    self.transitionToRoute('posts.index');\n                    self.notifications.showSuccess('Your post has been deleted.', { delayed: true });\n                }, function () {\n                    self.notifications.showError('Your post could not be deleted. Please try again.');\n                });\n\n            },\n\n            confirmReject: function () {\n                return false;\n            }\n        },\n        confirm: {\n            accept: {\n                text: 'Delete',\n                buttonClass: 'button-delete'\n            },\n            reject: {\n                text: 'Cancel',\n                buttonClass: 'button'\n            }\n        }\n    });\n\n    __exports__[\"default\"] = DeletePostController;\n  });",
    "define(\"ghost/controllers/modals/delete-user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var DeleteUserController = Ember.Controller.extend({\n        actions: {\n            confirmAccept: function () {\n                var self = this,\n                    user = this.get('model');\n\n                user.destroyRecord().then(function () {\n                    self.store.unloadAll('post');\n                    self.transitionToRoute('settings.users');\n                    self.notifications.showSuccess('The user has been deleted.', { delayed: true });\n                }, function () {\n                    self.notifications.showError('The user could not be deleted. Please try again.');\n                });\n\n            },\n\n            confirmReject: function () {\n                return false;\n            }\n        },\n        confirm: {\n            accept: {\n                text: 'Delete User',\n                buttonClass: 'button-delete'\n            },\n            reject: {\n                text: 'Cancel',\n                buttonClass: 'button'\n            }\n        }\n    });\n\n    __exports__[\"default\"] = DeleteUserController;\n  });",
    "define(\"ghost/controllers/modals/invite-new-user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var InviteNewUserController = Ember.Controller.extend({\n        //Used to set the initial value for the dropdown\n        authorRole: Ember.computed(function () {\n            var self = this;\n            return this.store.find('role').then(function (roles) {\n                var authorRole = roles.findBy('name', 'Author');\n                //Initialize role as well.\n                self.set('role', authorRole);\n                self.set('authorRole', authorRole);\n                return authorRole;\n            });\n        }),\n        \n        confirm: {\n            accept: {\n                text: 'send invitation now'\n            },\n            reject: {\n                buttonClass: 'hidden'\n            }\n        },\n            \n        actions: {\n            setRole: function (role) {\n                this.set('role', role);\n            },\n\n            confirmAccept: function () {\n                var email = this.get('email'),\n                    role = this.get('role'),\n                    self = this,\n                    newUser;\n\n                // reset the form and close the modal\n                self.set('email', '');\n                self.set('role', self.get('authorRole'));\n                self.send('closeModal');\n\n                this.store.find('user').then(function (result) {\n                    var invitedUser = result.findBy('email', email);\n                    if (invitedUser) {\n                        if (invitedUser.get('status') === 'invited' || invitedUser.get('status') === 'invited-pending') {\n                            self.notifications.showWarn('A user with that email address was already invited.');\n                        } else {\n                            self.notifications.showWarn('A user with that email address already exists.');\n                        }\n                        \n                    } else {\n                        newUser = self.store.createRecord('user', {\n                            email: email,\n                            status: 'invited',\n                            role: role\n                        });\n\n                        newUser.save().then(function () {\n                            var notificationText = 'Invitation sent! (' + email + ')';\n\n                            // If sending the invitation email fails, the API will still return a status of 201\n                            // but the user's status in the response object will be 'invited-pending'.\n                            if (newUser.get('status') === 'invited-pending') {\n                                self.notifications.showWarn('Invitation email was not sent.  Please try resending.');\n                            } else {\n                                self.notifications.showSuccess(notificationText);\n                            }\n                        }).catch(function (errors) {\n                            newUser.deleteRecord();\n                            self.notifications.showErrors(errors);\n                        });\n                    }\n                });\n            },\n\n            confirmReject: function () {\n                return false;\n            }\n        }\n    });\n\n    __exports__[\"default\"] = InviteNewUserController;\n  });",
    "define(\"ghost/controllers/modals/leave-editor\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var LeaveEditorController = Ember.Controller.extend({\n        args: Ember.computed.alias('model'),\n\n        actions: {\n            confirmAccept: function () {\n                var args = this.get('args'),\n                    editorController,\n                    model,\n                    transition;\n\n                if (Ember.isArray(args)) {\n                    editorController = args[0];\n                    transition = args[1];\n                    model = editorController.get('model');\n                }\n\n                if (!transition || !editorController) {\n                    this.notifications.showError('Sorry, there was an error in the application. Please let the Ghost team know what happened.');\n                    return true;\n                }\n\n                // definitely want to clear the data store and post of any unsaved, client-generated tags\n                model.updateTags();\n\n                if (model.get('isNew')) {\n                    // the user doesn't want to save the new, unsaved post, so delete it.\n                    model.deleteRecord();\n                } else {\n                    // roll back changes on model props\n                    model.rollback();\n                }\n\n                // setting isDirty to false here allows willTransition on the editor route to succeed\n                editorController.set('isDirty', false);\n\n                // since the transition is now certain to complete, we can unset window.onbeforeunload here\n                window.onbeforeunload = null;\n\n                transition.retry();\n            },\n\n            confirmReject: function () {\n\n            }\n        },\n\n        confirm: {\n            accept: {\n                text: 'Leave',\n                buttonClass: 'button-delete'\n            },\n            reject: {\n                text: 'Stay',\n                buttonClass: 'button'\n            }\n        }\n    });\n\n    __exports__[\"default\"] = LeaveEditorController;\n  });",
    "define(\"ghost/controllers/modals/transfer-owner\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var TransferOwnerController = Ember.Controller.extend({\n        actions: {\n            confirmAccept: function () {\n                var user = this.get('model'),\n                    url = this.get('ghostPaths.url').api('users', 'owner'),\n                    self = this;\n\n                self.get('popover').closePopovers();\n\n                ic.ajax.request(url, {\n                    type: 'PUT',\n                    data: {\n                        owner: [{\n                            'id': user.get('id')\n                        }]\n                    }\n                }).then(function (response) {\n                    // manually update the roles for the users that just changed roles\n                    // because store.pushPayload is not working with embedded relations\n                    if (response && Ember.isArray(response.users)) {\n                        response.users.forEach(function (userJSON) {\n                            var user = self.store.getById('user', userJSON.id),\n                                role = self.store.getById('role', userJSON.roles[0].id);\n\n                            user.set('role', role);\n                        });\n                    }\n\n                    self.notifications.showSuccess('Ownership successfully transferred to ' + user.get('name'));\n                }).catch(function (error) {\n                    self.notifications.showAPIError(error);\n                });\n            },\n\n            confirmReject: function () {\n                return false;\n            }\n        },\n\n        confirm: {\n            accept: {\n                text: 'YEP - I\\'M SURE',\n                buttonClass: 'button-delete'\n            },\n            reject: {\n                text: 'CANCEL',\n                buttonClass: 'button'\n            }\n        }\n    });\n\n    __exports__[\"default\"] = TransferOwnerController;\n  });",
    "define(\"ghost/controllers/modals/upload\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n\n    var UploadController = Ember.Controller.extend({\n        acceptEncoding: 'image/*',\n        actions: {\n            confirmAccept: function () {\n                var self = this;\n\n                this.get('model').save().then(function (model) {\n                    self.notifications.showSuccess('Saved');\n                    return model;\n                }).catch(function (err) {\n                    self.notifications.showErrors(err);\n                });\n            },\n\n            confirmReject: function () {\n                return false;\n            }\n        }\n    });\n\n    __exports__[\"default\"] = UploadController;\n  });",
    "define(\"ghost/controllers/post-settings-menu\", \n  [\"ghost/utils/date-formatting\",\"ghost/models/slug-generator\",\"ghost/utils/bound-one-way\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /* global moment */\n    var parseDateString = __dependency1__.parseDateString;\n    var formatDate = __dependency1__.formatDate;\n    var SlugGenerator = __dependency2__[\"default\"];\n    var boundOneWay = __dependency3__[\"default\"];\n\n    var PostSettingsMenuController = Ember.ObjectController.extend({\n        init: function () {\n            this._super();\n\n            // when creating a new post we want to observe the title\n            // to generate the post's slug\n            if (this.get('isNew')) {\n                this.addObserver('titleScratch', this, 'titleObserver');\n            }\n        },\n\n        selectedAuthor: null,\n        initializeSelectedAuthor: Ember.observer('model', function () {\n            var self = this;\n\n            return this.get('author').then(function (author) {\n                self.set('selectedAuthor', author);\n                return author;\n            });\n        }).on('init'),\n\n        changeAuthor: function () {\n            var author = this.get('author'),\n                selectedAuthor = this.get('selectedAuthor'),\n                model = this.get('model'),\n                self = this;\n            //return if nothing changed\n            if (selectedAuthor.get('id') === author.get('id')) {\n                return;\n            }\n            model.set('author', selectedAuthor);\n\n            //if this is a new post (never been saved before), don't try to save it\n            if (this.get('isNew')) {\n                return;\n            }\n\n            model.save(this.get('saveOptions')).catch(function (errors) {\n                self.showErrors(errors);\n                self.set('selectedAuthor', author);\n                model.rollback();\n            });\n        }.observes('selectedAuthor'),\n        authors: function () {\n            //Loaded asynchronously, so must use promise proxies.\n            var deferred = {};\n\n            deferred.promise = this.store.find('user').then(function (users) {\n                return users.rejectBy('id', 'me');\n            }).then(function (users) {\n                return users.filter(function (user) {\n                    return user.get('active');\n                });\n            });\n\n            return Ember.ArrayProxy\n                .extend(Ember.PromiseProxyMixin)\n                .create(deferred);\n        }.property(),\n        //Changes in the PSM are too minor to warrant NProgress firing\n        saveOptions: {disableNProgress: true},\n        /**\n         * The placeholder is the published date of the post,\n         * or the current date if the pubdate has not been set.\n         */\n        publishedAtPlaceholder: function () {\n            var pubDate = this.get('published_at');\n            if (pubDate) {\n                return formatDate(pubDate);\n            }\n            return formatDate(moment());\n        }.property('publishedAtValue'),\n        publishedAtValue: boundOneWay('published_at', formatDate),\n\n        slugValue: boundOneWay('slug'),\n        //Lazy load the slug generator for slugPlaceholder\n        slugGenerator: Ember.computed(function () {\n            return SlugGenerator.create({\n                ghostPaths: this.get('ghostPaths'),\n                slugType: 'post'\n            });\n        }),\n        //Requests slug from title\n        generateSlugPlaceholder: function () {\n            var self = this,\n                title = this.get('titleScratch');\n\n            this.get('slugGenerator').generateSlug(title).then(function (slug) {\n                self.set('slugPlaceholder', slug);\n            });\n        },\n        titleObserver: function () {\n            if (this.get('isNew') && !this.get('title')) {\n                Ember.run.debounce(this, 'generateSlugPlaceholder', 700);\n            }\n        },\n        slugPlaceholder: function (key, value) {\n            var slug = this.get('slug');\n\n            //If the post has a slug, that's its placeholder.\n            if (slug) {\n                return slug;\n            }\n\n            //Otherwise, it's whatever value was set by the\n            //  slugGenerator (below)\n            if (arguments.length > 1) {\n                return value;\n            }\n            //The title will stand in until the actual slug has been generated\n            return this.get('titleScratch');\n        }.property(),\n\n        showErrors: function (errors) {\n            errors = Ember.isArray(errors) ? errors : [errors];\n            this.notifications.showErrors(errors);\n        },\n        showSuccess: function (message) {\n            this.notifications.showSuccess(message);\n        },\n        actions: {\n            togglePage: function () {\n                var self = this;\n\n                this.toggleProperty('page');\n                // If this is a new post.  Don't save the model.  Defer the save\n                // to the user pressing the save button\n                if (this.get('isNew')) {\n                    return;\n                }\n\n                this.get('model').save(this.get('saveOptions')).catch(function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            },\n            /**\n             * triggered by user manually changing slug\n             */\n            updateSlug: function (newSlug) {\n                var slug = this.get('slug'),\n                    self = this;\n\n                newSlug = newSlug || slug;\n\n                newSlug = newSlug.trim();\n\n                // Ignore unchanged slugs or candidate slugs that are empty\n                if (!newSlug || slug === newSlug) {\n                    return;\n                }\n\n                this.get('slugGenerator').generateSlug(newSlug).then(function (serverSlug) {\n                    // If after getting the sanitized and unique slug back from the API\n                    // we end up with a slug that matches the existing slug, abort the change\n                    if (serverSlug === slug) {\n                        return;\n                    }\n\n                    // Because the server transforms the candidate slug by stripping\n                    // certain characters and appending a number onto the end of slugs\n                    // to enforce uniqueness, there are cases where we can get back a\n                    // candidate slug that is a duplicate of the original except for\n                    // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)\n\n                    // get the last token out of the slug candidate and see if it's a number\n                    var slugTokens = serverSlug.split('-'),\n                        check = Number(slugTokens.pop());\n\n                    // if the candidate slug is the same as the existing slug except\n                    // for the incrementor then the existing slug should be used\n                    if (_.isNumber(check) && check > 0) {\n                        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {\n                            return;\n                        }\n                    }\n\n                    self.set('slug', serverSlug);\n\n                    if (self.hasObserverFor('titleScratch')) {\n                        self.removeObserver('titleScratch', self, 'titleObserver');\n                    }\n\n                    // If this is a new post.  Don't save the model.  Defer the save\n                    // to the user pressing the save button\n                    if (self.get('isNew')) {\n                        return;\n                    }\n\n                    return self.get('model').save(self.get('saveOptions'));\n                }).then(function () {\n                    self.showSuccess('Permalink successfully changed to <strong>' +\n                        self.get('slug') + '</strong>.');\n                }).catch(function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            },\n\n            /**\n             * Parse user's set published date.\n             * Action sent by post settings menu view.\n             * (#1351)\n             */\n            setPublishedAt: function (userInput) {\n                var errMessage = '',\n                    newPublishedAt = parseDateString(userInput),\n                    publishedAt = this.get('published_at'),\n                    self = this;\n\n                if (!userInput) {\n                    //Clear out the published_at field for a draft\n                    if (this.get('isDraft')) {\n                        this.set('published_at', null);\n                    }\n                    return;\n                }\n\n                // Validate new Published date\n                if (!newPublishedAt.isValid()) {\n                    errMessage = 'Published Date must be a valid date with format: ' +\n                        'DD MMM YY @ HH:mm (e.g. 6 Dec 14 @ 15:00)';\n                }\n                if (newPublishedAt.diff(new Date(), 'h') > 0) {\n                    errMessage = 'Published Date cannot currently be in the future.';\n                }\n\n                //If errors, notify and exit.\n                if (errMessage) {\n                    this.showErrors(errMessage);\n                    return;\n                }\n\n                // Do nothing if the user didn't actually change the date\n                if (publishedAt && publishedAt.isSame(newPublishedAt)) {\n                    return;\n                }\n\n                //Validation complete\n                this.set('published_at', newPublishedAt);\n\n                // If this is a new post.  Don't save the model.  Defer the save\n                // to the user pressing the save button\n                if (this.get('isNew')) {\n                    return;\n                }\n\n                this.get('model').save(this.get('saveOptions')).catch(function (errors) {\n                    self.showErrors(errors);\n                    self.get('model').rollback();\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = PostSettingsMenuController;\n  });",
    "define(\"ghost/controllers/post-tags-input\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PostTagsInputController = Ember.Controller.extend({\n\n        tagEnteredOrder: Ember.A(),\n\n        tags: Ember.computed('parentController.tags', function () {\n            var proxyTags = Ember.ArrayProxy.create({\n                content: this.get('parentController.tags')\n            }),\n\n            temp = proxyTags.get('arrangedContent').slice();\n\n            proxyTags.get('arrangedContent').clear();\n\n            this.get('tagEnteredOrder').forEach(function (tagName) {\n                var tag = temp.find(function (tag) {\n                    return tag.get('name') === tagName;\n                });\n\n                if (tag) {\n                    proxyTags.get('arrangedContent').addObject(tag);\n                    temp.removeObject(tag);\n                }\n            });\n\n            temp.forEach(function (tag) {\n                proxyTags.get('arrangedContent').addObject(tag);\n            });\n\n            return proxyTags;\n        }),\n\n        suggestions: null,\n        newTagText: null,\n\n        actions: {\n            // triggered when the view is inserted so that later store.all('tag')\n            // queries hit a full store cache and we don't see empty or out-of-date\n            // suggestion lists\n            loadAllTags: function () {\n                this.store.find('tag');\n            },\n\n            addNewTag: function () {\n                var newTagText = this.get('newTagText'),\n                    searchTerm,\n                    existingTags,\n                    newTag;\n\n                if (Ember.isEmpty(newTagText) || this.hasTag(newTagText)) {\n                    this.send('reset');\n                    return;\n                }\n\n                searchTerm = newTagText.toLowerCase();\n\n                // add existing tag if we have a match\n                existingTags = this.store.all('tag').filter(function (tag) {\n                    return tag.get('name').toLowerCase() === searchTerm;\n                });\n                if (existingTags.get('length')) {\n                    this.send('addTag', existingTags.get('firstObject'));\n                } else {\n                    // otherwise create a new one\n                    newTag = this.store.createRecord('tag');\n                    newTag.set('name', newTagText);\n\n                    this.send('addTag', newTag);\n                }\n\n                this.send('reset');\n            },\n\n            addTag: function (tag) {\n                if (!Ember.isEmpty(tag)) {\n                    this.get('tags').addObject(tag);\n                    this.get('tagEnteredOrder').addObject(tag.get('name'));\n                }\n\n                this.send('reset');\n            },\n\n            deleteTag: function (tag) {\n                this.get('tags').removeObject(tag);\n                this.get('tagEnteredOrder').removeObject(tag.get('name'));\n            },\n\n            deleteLastTag: function () {\n                this.send('deleteTag', this.get('tags.lastObject'));\n            },\n\n            selectSuggestion: function (suggestion) {\n                if (!Ember.isEmpty(suggestion)) {\n                    this.get('suggestions').setEach('selected', false);\n                    suggestion.set('selected', true);\n                }\n            },\n\n            selectNextSuggestion: function () {\n                var suggestions = this.get('suggestions'),\n                    selectedSuggestion = this.get('selectedSuggestion'),\n                    currentIndex,\n                    newSelection;\n\n                if (!Ember.isEmpty(suggestions)) {\n                    currentIndex = suggestions.indexOf(selectedSuggestion);\n                    if (currentIndex + 1 < suggestions.get('length')) {\n                        newSelection = suggestions[currentIndex + 1];\n                        this.send('selectSuggestion', newSelection);\n                    } else {\n                        suggestions.setEach('selected', false);\n                    }\n                }\n            },\n\n            selectPreviousSuggestion: function () {\n                var suggestions = this.get('suggestions'),\n                    selectedSuggestion = this.get('selectedSuggestion'),\n                    currentIndex,\n                    lastIndex,\n                    newSelection;\n\n                if (!Ember.isEmpty(suggestions)) {\n                    currentIndex = suggestions.indexOf(selectedSuggestion);\n                    if (currentIndex === -1) {\n                        lastIndex = suggestions.get('length') - 1;\n                        this.send('selectSuggestion', suggestions[lastIndex]);\n                    } else if (currentIndex - 1 >= 0) {\n                        newSelection = suggestions[currentIndex - 1];\n                        this.send('selectSuggestion', newSelection);\n                    } else {\n                        suggestions.setEach('selected', false);\n                    }\n                }\n            },\n\n            addSelectedSuggestion: function () {\n                var suggestion = this.get('selectedSuggestion');\n                if (Ember.isEmpty(suggestion)) { return; }\n\n                this.send('addTag', suggestion.get('tag'));\n            },\n\n            reset: function () {\n                this.set('suggestions', null);\n                this.set('newTagText', null);\n            }\n        },\n\n\n        selectedSuggestion: function () {\n            var suggestions = this.get('suggestions');\n            if (suggestions && suggestions.get('length')) {\n                return suggestions.filterBy('selected').get('firstObject');\n            } else {\n                return null;\n            }\n        }.property('suggestions.@each.selected'),\n\n\n        updateSuggestionsList: function () {\n            var searchTerm = this.get('newTagText'),\n                matchingTags,\n                // Limit the suggestions number\n                maxSuggestions = 5,\n                suggestions = new Ember.A();\n\n            if (!searchTerm || Ember.isEmpty(searchTerm.trim())) {\n                this.set('suggestions', null);\n                return;\n            }\n\n            searchTerm = searchTerm.trim();\n\n            matchingTags = this.findMatchingTags(searchTerm);\n            matchingTags = matchingTags.slice(0, maxSuggestions);\n            matchingTags.forEach(function (matchingTag) {\n                var suggestion = this.makeSuggestionObject(matchingTag, searchTerm);\n                suggestions.pushObject(suggestion);\n            }, this);\n\n            this.set('suggestions', suggestions);\n        }.observes('newTagText'),\n\n\n        findMatchingTags: function (searchTerm) {\n            var matchingTags,\n                self = this,\n                allTags = this.store.all('tag');\n\n            if (allTags.get('length') === 0) {\n                return [];\n            }\n\n            searchTerm = searchTerm.toLowerCase();\n\n            matchingTags = allTags.filter(function (tag) {\n                var tagNameMatches,\n                    hasAlreadyBeenAdded;\n\n                tagNameMatches = tag.get('name').toLowerCase().indexOf(searchTerm) !== -1;\n                hasAlreadyBeenAdded = self.hasTag(tag.get('name'));\n\n                return tagNameMatches && !hasAlreadyBeenAdded;\n            });\n\n            return matchingTags;\n        },\n\n        hasTag: function (tagName) {\n            return this.get('tags').mapBy('name').contains(tagName);\n        },\n\n        makeSuggestionObject: function (matchingTag, _searchTerm) {\n            var searchTerm = Ember.Handlebars.Utils.escapeExpression(_searchTerm),\n                regexEscapedSearchTerm = searchTerm.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&'),\n                tagName = Ember.Handlebars.Utils.escapeExpression(matchingTag.get('name')),\n                regex = new RegExp('(' + regexEscapedSearchTerm + ')', 'gi'),\n                highlightedName,\n                suggestion = new Ember.Object();\n\n            highlightedName = tagName.replace(regex, '<mark>$1</mark>');\n            highlightedName = new Ember.Handlebars.SafeString(highlightedName);\n\n            suggestion.set('tag', matchingTag);\n            suggestion.set('highlightedName', highlightedName);\n\n            return suggestion;\n        },\n\n    });\n\n    __exports__[\"default\"] = PostTagsInputController;\n  });",
    "define(\"ghost/controllers/posts\", \n  [\"ghost/mixins/pagination-controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PaginationControllerMixin = __dependency1__[\"default\"];\n\n    function publishedAtCompare(item1, item2) {\n        var published1 = item1.get('published_at'),\n            published2 = item2.get('published_at');\n\n        if (!published1 && !published2) {\n            return 0;\n        }\n\n        if (!published1 && published2) {\n            return -1;\n        }\n\n        if (!published2 && published1) {\n            return 1;\n        }\n\n        return Ember.compare(published1.valueOf(), published2.valueOf());\n    }\n\n\n    var PostsController = Ember.ArrayController.extend(PaginationControllerMixin, {\n        // this will cause the list to re-sort when any of these properties change on any of the models\n        sortProperties: ['status', 'published_at', 'updated_at'],\n\n        // override Ember.SortableMixin\n        //\n        // this function will keep the posts list sorted when loading individual/bulk\n        // models from the server, even if records in between haven't been loaded.\n        // this can happen when reloading the page on the Editor or PostsPost routes.\n        //\n        // a custom sort function is needed in order to sort the posts list the same way the server would:\n        //     status: ASC\n        //     published_at: DESC\n        //     updated_at: DESC\n        orderBy: function (item1, item2) {\n            var updated1 = item1.get('updated_at'),\n                updated2 = item2.get('updated_at'),\n                statusResult,\n                updatedAtResult,\n                publishedAtResult;\n\n            // when `updated_at` is undefined, the model is still\n            // being written to with the results from the server\n            if (item1.get('isNew') || !updated1) {\n                return -1;\n            }\n\n            if (item2.get('isNew') || !updated2) {\n                return 1;\n            }\n\n            statusResult = Ember.compare(item1.get('status'), item2.get('status'));\n            updatedAtResult = Ember.compare(updated1.valueOf(), updated2.valueOf());\n            publishedAtResult = publishedAtCompare(item1, item2);\n\n            if (statusResult === 0) {\n                if (publishedAtResult === 0) {\n                    // This should be DESC\n                    return updatedAtResult * -1;\n                }\n                // This should be DESC\n                return publishedAtResult * -1;\n            }\n\n            return statusResult;\n        },\n\n        init: function () {\n            //let the PaginationControllerMixin know what type of model we will be paginating\n            //this is necesariy because we do not have access to the model inside the Controller::init method\n            this._super({'modelType': 'post'});\n\n        },\n\n        actions: {\n            resetContentPreview: function () {\n                $('.content-list').removeAttr('style');\n                $('.content-preview').removeAttr('style');\n            },\n\n            showContentPreview: function () {\n                $('.content-list').animate({right: '100%', left: '-100%', 'margin-right': '15px'}, 300);\n                $('.content-preview').animate({right: '0', left: '0', 'margin-left': '0'}, 300);\n            },\n\n            hideContentPreview: function () {\n                $('.content-list').animate({right: '0', left: '0', 'margin-right': '0'}, 300);\n                $('.content-preview').animate({right: '-100%', left: '100%', 'margin-left': '15px'}, 300);\n            },\n        }\n    });\n\n    __exports__[\"default\"] = PostsController;\n  });",
    "define(\"ghost/controllers/posts/post\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PostController = Ember.ObjectController.extend({\n        isPublished: Ember.computed.equal('status', 'published'),\n        classNameBindings: ['featured'],\n\n        actions: {\n            toggleFeatured: function () {\n                var options = {disableNProgress: true},\n                    self = this;\n\n                this.toggleProperty('featured');\n                this.get('model').save(options).catch(function (errors) {\n                    self.notifications.showErrors(errors);\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = PostController;\n  });",
    "define(\"ghost/controllers/reset\", \n  [\"ghost/utils/ajax\",\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /*global console*/\r\n    /* jshint unused: false */\r\n    var ajax = __dependency1__[\"default\"];\n\n    var ValidationEngine = __dependency2__[\"default\"];\n\n    \r\n    var ResetController = Ember.Controller.extend(ValidationEngine, {\r\n        passwords: {\r\n            newPassword: '',\r\n            ne2Password: ''\r\n        },\r\n        token: '',\r\n        submitButtonDisabled: false,\r\n    \r\n        validationType: 'reset',\r\n    \r\n        actions: {\r\n            submit: function () {\r\n                var self = this,\r\n                    data = self.getProperties('passwords', 'token');\r\n    \r\n                this.toggleProperty('submitting');\r\n                this.validate({format: false}).then(function () {\r\n                    ajax({\r\n                        url: self.get('ghostPaths.url').api('authentication', 'passwordreset'),\r\n                        type: 'PUT',\r\n                        data: {\r\n                            passwordreset: [{\r\n                                newPassword: data.passwords.newPassword,\r\n                                ne2Password: data.passwords.ne2Password,\r\n                                token: data.token\r\n                            }]\r\n                        }\r\n                    }).then(function (resp) {\r\n                        self.toggleProperty('submitting');\r\n                        self.notifications.showSuccess(resp.passwordreset[0].message, true);\r\n                        self.transitionToRoute('signin');\r\n                    }).catch(function (response) {\r\n                        self.notifications.showAPIError(response);\r\n                        self.toggleProperty('submitting');\r\n                    });\r\n                }).catch(function (error) {\r\n                    self.toggleProperty('submitting');\r\n                    self.notifications.showErrors(error);\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ResetController;\n  });",
    "define(\"ghost/controllers/settings\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingsController = Ember.Controller.extend({\n        showApps: Ember.computed.bool('config.apps')\n    });\n\n    __exports__[\"default\"] = SettingsController;\n  });",
    "define(\"ghost/controllers/settings/app\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*global alert */\n\n    var AppStates = {\n        active: 'active',\n        working: 'working',\n        inactive: 'inactive'\n    };\n\n    var SettingsAppController = Ember.ObjectController.extend({\n        appState: AppStates.active,\n        buttonText: '',\n        \n        setAppState: function () {\n            this.set('appState', this.get('active') ? AppStates.active : AppStates.inactive);\n        }.on('init'),\n\n        buttonTextSetter: function () {\n            switch (this.get('appState')) {\n                case AppStates.active:\n                    this.set('buttonText', 'Deactivate');\n                    break;\n                case AppStates.inactive:\n                    this.set('buttonText', 'Activate');\n                    break;\n                case AppStates.working:\n                    this.set('buttonText', 'Working');\n                    break;\n            }\n        }.observes('appState').on('init'),\n\n        activeClass: function () {\n            return this.appState === AppStates.active ? true : false;\n        }.property('appState'),\n\n        inactiveClass: function () {\n            return this.appState === AppStates.inactive ? true : false;\n        }.property('appState'),\n\n        actions: {\n            toggleApp: function (app) {\n                var self = this;\n                this.set('appState', AppStates.working);\n                \n                app.set('active', !app.get('active'));\n                \n                app.save().then(function () {\n                    self.setAppState();\n                })\n                .then(function () {\n                    alert('@TODO: Success');\n                })\n                .catch(function () {\n                    alert('@TODO: Failure');\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = SettingsAppController;\n  });",
    "define(\"ghost/controllers/settings/general\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingsGeneralController = Ember.ObjectController.extend({\n        isDatedPermalinks: function (key, value) {\n            // setter\n            if (arguments.length > 1) {\n                this.set('permalinks', value ? '/:year/:month/:day/:slug/' : '/:slug/');\n            }\n\n            // getter\n            var slugForm = this.get('permalinks');\n\n            return slugForm !== '/:slug/';\n        }.property('permalinks'),\n\n        themes: function () {\n            return this.get('availableThemes').reduce(function (themes, t) {\n                var theme = {};\n\n                theme.name = t.name;\n                theme.label = t.package ? t.package.name + ' - ' + t.package.version : t.name;\n                theme.package = t.package;\n                theme.active = !!t.active;\n\n                themes.push(theme);\n\n                return themes;\n            }, []);\n        }.property().readOnly(),\n\n        actions: {\n            save: function () {\n                var self = this;\n\n                return this.get('model').save().then(function (model) {\n                    self.notifications.showSuccess('Settings successfully saved.');\n\n                    return model;\n                }).catch(function (errors) {\n                    self.notifications.showErrors(errors);\n                });\n            },\n        }\n    });\n\n    __exports__[\"default\"] = SettingsGeneralController;\n  });",
    "define(\"ghost/controllers/settings/users/index\", \n  [\"ghost/mixins/pagination-controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PaginationControllerMixin = __dependency1__[\"default\"];\n\n    var UsersIndexController = Ember.ArrayController.extend(PaginationControllerMixin, {\n        init: function () {\n            //let the PaginationControllerMixin know what type of model we will be paginating\n            //this is necessary because we do not have access to the model inside the Controller::init method\n            this._super({'modelType': 'user'});\n        },\n\n        users: Ember.computed.alias('model'),\n\n        activeUsers: Ember.computed.filter('users', function (user) {\n            return /^active|warn-[1-4]|locked$/.test(user.get('status'));\n        }),\n\n        invitedUsers: Ember.computed.filter('users', function (user) {\n            var status = user.get('status');\n\n            return status === 'invited' || status === 'invited-pending';\n        })\n    });\n\n    __exports__[\"default\"] = UsersIndexController;\n  });",
    "define(\"ghost/controllers/settings/users/user\", \n  [\"ghost/models/slug-generator\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var SlugGenerator = __dependency1__[\"default\"];\n\n    var SettingsUserController = Ember.ObjectController.extend({\n\n        _lastSlug: null,\n\n        updateLastSlug: Ember.observer(function () {\n            this.set('_lastSlug', this.get('user.slug'));\n        }),\n\n        user: Ember.computed.alias('model'),\n\n        email: Ember.computed.readOnly('user.email'),\n\n        coverDefault: function () {\n            return this.get('ghostPaths.url').asset('/shared/img/user-cover.png');\n        }.property('ghostPaths'),\n\n        userDefault: function () {\n            return this.get('ghostPaths.url').asset('/shared/img/user-image.png');\n        }.property('ghostPaths'),\n\n        cover: function () {\n            var cover = this.get('user.cover');\n            if (Ember.isBlank(cover)) {\n                cover = this.get('coverDefault');\n            }\n            return cover;\n        }.property('user.cover', 'coverDefault'),\n\n        coverTitle: function () {\n            return this.get('user.name') + '\\'s Cover Image';\n        }.property('user.name'),\n\n        image: function () {\n            return  'background-image: url(' + this.get('imageUrl') + ')';\n        }.property('imageUrl'),\n\n        imageUrl: function () {\n            return this.get('user.image') || this.get('userDefault');\n        }.property('user.image'),\n\n        last_login: function () {\n            var lastLogin = this.get('user.last_login');\n\n            return lastLogin ? lastLogin.fromNow() : '';\n        }.property('user.last_login'),\n\n        created_at: function () {\n            var createdAt = this.get('user.created_at');\n\n            return createdAt ? createdAt.fromNow() : '';\n        }.property('user.created_at'),\n\n        //Lazy load the slug generator for slugPlaceholder\n        slugGenerator: Ember.computed(function () {\n            return SlugGenerator.create({\n                ghostPaths: this.get('ghostPaths'),\n                slugType: 'user'\n            });\n        }),\n\n        actions: {\n            changeRole: function (newRole) {\n                this.set('model.role', newRole);\n            },\n            revoke: function () {\n                var self = this,\n                    model = this.get('model'),\n                    email = this.get('email');\n\n                //reload the model to get the most up-to-date user information\n                model.reload().then(function () {\n                    if (self.get('invited')) {\n                        model.destroyRecord().then(function () {\n                            var notificationText = 'Invitation revoked. (' + email + ')';\n                            self.notifications.showSuccess(notificationText, false);\n                        }).catch(function (error) {\n                            self.notifications.showAPIError(error);\n                        });\n                    } else {\n                        //if the user is no longer marked as \"invited\", then show a warning and reload the route\n                        self.get('target').send('reload');\n                        self.notifications.showError('This user has already accepted the invitation.', {delayed: 500});\n                    }\n                });\n            },\n\n            resend: function () {\n                var self = this;\n\n                this.get('model').resendInvite().then(function (result) {\n                    var notificationText = 'Invitation resent! (' + self.get('email') + ')';\n                    // If sending the invitation email fails, the API will still return a status of 201\n                    // but the user's status in the response object will be 'invited-pending'.\n                    if (result.users[0].status === 'invited-pending') {\n                        self.notifications.showWarn('Invitation email was not sent.  Please try resending.');\n                    } else {\n                        self.get('model').set('status', result.users[0].status);\n                        self.notifications.showSuccess(notificationText);\n                    }\n                }).catch(function (error) {\n                    self.notifications.showAPIError(error);\n                });\n            },\n\n            save: function () {\n                var user = this.get('user'),\n                    self = this;\n\n                user.save({ format: false }).then(function (model) {\n                    self.notifications.showSuccess('Settings successfully saved.');\n\n                    return model;\n                }).catch(function (errors) {\n                    self.notifications.showErrors(errors);\n                });\n            },\n\n            password: function () {\n                var user = this.get('user'),\n                    self = this;\n\n                if (user.get('isPasswordValid')) {\n                    user.saveNewPassword().then(function (model) {\n\n                        // Clear properties from view\n                        user.setProperties({\n                            'password': '',\n                            'newPassword': '',\n                            'ne2Password': ''\n                        });\n\n                        self.notifications.showSuccess('Password updated.');\n\n                        return model;\n                    }).catch(function (errors) {\n                        self.notifications.showAPIError(errors);\n                    });\n                } else {\n                    self.notifications.showErrors(user.get('passwordValidationErrors'));\n                }\n            },\n\n            updateSlug: function (newSlug) {\n                var slug = this.get('_lastSlug'),\n                    self = this;\n\n                newSlug = newSlug || slug;\n\n                newSlug = newSlug.trim();\n\n                // Ignore unchanged slugs or candidate slugs that are empty\n                if (!newSlug || slug === newSlug) {\n                    return;\n                }\n\n                this.get('slugGenerator').generateSlug(newSlug).then(function (serverSlug) {\n\n                    // If after getting the sanitized and unique slug back from the API\n                    // we end up with a slug that matches the existing slug, abort the change\n                    if (serverSlug === slug) {\n                        return;\n                    }\n\n                    // Because the server transforms the candidate slug by stripping\n                    // certain characters and appending a number onto the end of slugs\n                    // to enforce uniqueness, there are cases where we can get back a\n                    // candidate slug that is a duplicate of the original except for\n                    // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)\n\n                    // get the last token out of the slug candidate and see if it's a number\n                    var slugTokens = serverSlug.split('-'),\n                        check = Number(slugTokens.pop());\n\n                    // if the candidate slug is the same as the existing slug except\n                    // for the incrementor then the existing slug should be used\n                    if (_.isNumber(check) && check > 0) {\n                        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {\n                            return;\n                        }\n                    }\n\n                    self.set('_lastSlug', serverSlug);\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = SettingsUserController;\n  });",
    "define(\"ghost/controllers/setup\", \n  [\"ghost/utils/ajax\",\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ajax = __dependency1__[\"default\"];\n    var ValidationEngine = __dependency2__[\"default\"];\n\n    var SetupController = Ember.ObjectController.extend(ValidationEngine, {\n        blogTitle: null,\n        name: null,\n        email: null,\n        password: null,\n        submitting: false,\n\n        // ValidationEngine settings\n        validationType: 'setup',\n\n        actions: {\n            setup: function () {\n                var self = this,\n                    data = self.getProperties('blogTitle', 'name', 'email', 'password');\n\n                self.notifications.closePassive();\n\n                this.toggleProperty('submitting');\n                this.validate({ format: false }).then(function () {\n                    ajax({\n                        url: self.get('ghostPaths.url').api('authentication', 'setup'),\n                        type: 'POST',\n                        data: {\n                            setup: [{\n                                name: data.name,\n                                email: data.email,\n                                password: data.password,\n                                blogTitle: data.blogTitle\n                            }]\n                        }\n                    }).then(function () {\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\n                            identification: self.get('email'),\n                            password: self.get('password')\n                        });\n                    }, function (resp) {\n                        self.toggleProperty('submitting');\n                        self.notifications.showAPIError(resp);\n                    });\n                }, function (errors) {\n                    self.toggleProperty('submitting');\n                    self.notifications.showErrors(errors);\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = SetupController;\n  });",
    "define(\"ghost/controllers/signin\", \n  [\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ValidationEngine = __dependency1__[\"default\"];\n\n    var SigninController = Ember.Controller.extend(SimpleAuth.AuthenticationControllerMixin, ValidationEngine, {\n        authenticator: 'simple-auth-authenticator:oauth2-password-grant',\n\n        validationType: 'signin',\n\n        actions: {\n            authenticate: function () {\n                var data = this.getProperties('identification', 'password');\n\n                return this._super(data);\n            },\n\n            validateAndAuthenticate: function () {\n                var self = this;\n\n                this.validate({ format: false }).then(function () {\n                    self.notifications.closePassive();\n                    self.send('authenticate');\n                }).catch(function (errors) {\n                    self.notifications.showErrors(errors);\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = SigninController;\n  });",
    "define(\"ghost/controllers/signup\", \n  [\"ghost/utils/ajax\",\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ajax = __dependency1__[\"default\"];\n    var ValidationEngine = __dependency2__[\"default\"];\n\n    var SignupController = Ember.ObjectController.extend(ValidationEngine, {\n        name: null,\n        email: null,\n        password: null,\n        token: null,\n        submitting: false,\n\n        // ValidationEngine settings\n        validationType: 'signup',\n\n        actions: {\n            signup: function () {\n                var self = this,\n                    data = self.getProperties('name', 'email', 'password', 'token');\n\n                self.notifications.closePassive();\n\n                this.toggleProperty('submitting');\n                this.validate({ format: false }).then(function () {\n                    ajax({\n                        url: self.get('ghostPaths.url').api('authentication', 'invitation'),\n                        type: 'POST',\n                        dataType: 'json',\n                        data: {\n                            invitation: [{\n                                name: data.name,\n                                email: data.email,\n                                password: data.password,\n                                token: data.token\n                            }]\n                        }\n                    }).then(function () {\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\n                            identification: self.get('email'),\n                            password: self.get('password')\n                        });\n                    }, function (resp) {\n                        self.toggleProperty('submitting');\n                        self.notifications.showAPIError(resp);\n                    });\n                }, function (errors) {\n                    self.toggleProperty('submitting');\n                    self.notifications.showErrors(errors);\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = SignupController;\n  });",
    "define(\"ghost/helpers/gh-blog-url\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var blogUrl = Ember.Handlebars.makeBoundHelper(function () {\n\n        return new Ember.Handlebars.SafeString(this.get('config.blogUrl'));\n    });\n\n    __exports__[\"default\"] = blogUrl;\n  });",
    "define(\"ghost/helpers/gh-count-characters\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var countCharacters = Ember.Handlebars.makeBoundHelper(function (content) {\n        var el = document.createElement('span'),\n            length = content ? content.length : 0;\n\n        el.className = 'word-count';\n        if (length > 180) {\n            el.style.color = '#E25440';\n        } else {\n            el.style.color = '#9E9D95';\n        }\n\n        el.innerHTML = 200 - length;\n\n        return new Ember.Handlebars.SafeString(el.outerHTML);\n    });\n\n    __exports__[\"default\"] = countCharacters;\n  });",
    "define(\"ghost/helpers/gh-count-words\", \n  [\"ghost/utils/word-count\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var counter = __dependency1__[\"default\"];\n\n    var countWords = Ember.Handlebars.makeBoundHelper(function (markdown) {\n        if (/^\\s*$/.test(markdown)) {\n            return '0 words';\n        }\n\n        var count = counter(markdown || '');\n        return count + (count === 1 ? ' word' : ' words');\n    });\n\n    __exports__[\"default\"] = countWords;\n  });",
    "define(\"ghost/helpers/gh-format-html\", \n  [\"ghost/utils/caja-sanitizers\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global Handlebars, html_sanitize*/\n    var cajaSanitizers = __dependency1__[\"default\"];\n\n    var formatHTML = Ember.Handlebars.makeBoundHelper(function (html) {\n        var escapedhtml = html || '';\n\n        // replace script and iFrame\n        escapedhtml = escapedhtml.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n            '<pre class=\"js-embed-placeholder\">Embedded JavaScript</pre>');\n        escapedhtml = escapedhtml.replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\n            '<pre class=\"iframe-embed-placeholder\">Embedded iFrame</pre>');\n\n        // sanitize HTML\n        escapedhtml = html_sanitize(escapedhtml, cajaSanitizers.url, cajaSanitizers.id);\n        return new Handlebars.SafeString(escapedhtml);\n    });\n\n    __exports__[\"default\"] = formatHTML;\n  });",
    "define(\"ghost/helpers/gh-format-markdown\", \n  [\"ghost/utils/caja-sanitizers\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global Showdown, Handlebars, html_sanitize*/\n    var cajaSanitizers = __dependency1__[\"default\"];\n\n    var showdown = new Showdown.converter({extensions: ['ghostimagepreview', 'ghostgfm']});\n\n    var formatMarkdown = Ember.Handlebars.makeBoundHelper(function (markdown) {\n        var escapedhtml = '';\n\n        // convert markdown to HTML\n        escapedhtml = showdown.makeHtml(markdown || '');\n\n        // replace script and iFrame\n        escapedhtml = escapedhtml.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n            '<pre class=\"js-embed-placeholder\">Embedded JavaScript</pre>');\n        escapedhtml = escapedhtml.replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\n            '<pre class=\"iframe-embed-placeholder\">Embedded iFrame</pre>');\n\n        // sanitize html\n        escapedhtml = html_sanitize(escapedhtml, cajaSanitizers.url, cajaSanitizers.id);\n        return new Handlebars.SafeString(escapedhtml);\n    });\n\n    __exports__[\"default\"] = formatMarkdown;\n  });",
    "define(\"ghost/helpers/gh-format-timeago\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global moment */\n    var formatTimeago = Ember.Handlebars.makeBoundHelper(function (timeago) {\n        return moment(timeago).fromNow();\n        // stefanpenner says cool for small number of timeagos.\n        // For large numbers moment sucks => single Ember.Object based clock better\n        // https://github.com/manuelmitasch/ghost-admin-ember-demo/commit/fba3ab0a59238290c85d4fa0d7c6ed1be2a8a82e#commitcomment-5396524\n    });\n\n    __exports__[\"default\"] = formatTimeago;\n  });",
    "define(\"ghost/initializers/authentication\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ghostPaths = __dependency1__[\"default\"];\n\n    var Ghost = ghostPaths();\n\n    var AuthenticationInitializer = {\n\n        name: 'authentication',\n        before: 'simple-auth',\n        after: 'registerTrailingLocationHistory',\n\n        initialize: function (container) {\n            window.ENV = window.ENV || {};\n            window.ENV['simple-auth'] = {\n                authenticationRoute: 'signin',\n                routeAfterAuthentication: 'content',\n                authorizer: 'simple-auth-authorizer:oauth2-bearer'\n            };\n            SimpleAuth.Session.reopen({\n                user: function () {\n                    return container.lookup('store:main').find('user', 'me');\n                }.property()\n            });\n            SimpleAuth.Authenticators.OAuth2.reopen({\n                serverTokenEndpoint: Ghost.apiRoot + '/authentication/token',\n                refreshAccessTokens: true,\n                makeRequest: function (url, data) {\n                    data.client_id = 'ghost-admin';\n                    return this._super(url, data);\n                }\n            });\n        }\n    };\n\n    __exports__[\"default\"] = AuthenticationInitializer;\n  });",
    "define(\"ghost/initializers/ghost-config\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ConfigInitializer = {\n        name: 'config',\n\n        initialize: function (container, application) {\n            var apps = $('body').data('apps'),\n                fileStorage = $('body').data('filestorage'),\n                blogUrl = $('body').data('blogurl');\n\n            application.register(\n                'ghost:config', {apps: apps, fileStorage: fileStorage, blogUrl: blogUrl}, {instantiate: false}\n            );\n\n            application.inject('route', 'config', 'ghost:config');\n            application.inject('controller', 'config', 'ghost:config');\n            application.inject('component', 'config', 'ghost:config');\n        }\n    };\n\n    __exports__[\"default\"] = ConfigInitializer;\n  });",
    "define(\"ghost/initializers/ghost-paths\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ghostPaths = __dependency1__[\"default\"];\n\n    var ghostPathsInitializer = {\n        name: 'ghost-paths',\n        after: 'store',\n\n        initialize: function (container, application) {\n            application.register('ghost:paths', ghostPaths(), { instantiate: false });\n\n            application.inject('route', 'ghostPaths', 'ghost:paths');\n            application.inject('model', 'ghostPaths', 'ghost:paths');\n            application.inject('controller', 'ghostPaths', 'ghost:paths');\n        }\n    };\n\n    __exports__[\"default\"] = ghostPathsInitializer;\n  });",
    "define(\"ghost/initializers/notifications\", \n  [\"ghost/utils/notifications\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Notifications = __dependency1__[\"default\"];\n\n    var injectNotificationsInitializer = {\n        name: 'injectNotifications',\n        before: 'authentication',\n\n        initialize: function (container, application) {\n            application.register('notifications:main', Notifications);\n\n            application.inject('controller', 'notifications', 'notifications:main');\n            application.inject('component', 'notifications', 'notifications:main');\n            application.inject('router', 'notifications', 'notifications:main');\n            application.inject('route', 'notifications', 'notifications:main');\n        }\n    };\n\n    __exports__[\"default\"] = injectNotificationsInitializer;\n  });",
    "define(\"ghost/initializers/popover\", \n  [\"ghost/mixins/body-event-listener\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BodyEventListener = __dependency1__[\"default\"];\n\n    var PopoverService = Ember.Object.extend(Ember.Evented, BodyEventListener, {\n        bodyClick: function (event) {\n            /*jshint unused:false */\n            this.closePopovers();\n        },\n        closePopovers: function () {\n            this.trigger('close');\n        },\n        togglePopover: function (popoverName, popoverButton) {\n            this.trigger('toggle', {target: popoverName, button: popoverButton});\n        }\n    });\n\n    var popoverInitializer = {\n        name: 'popover',\n\n        initialize: function (container, application) {\n            application.register('popover:service', PopoverService);\n\n            application.inject('component:gh-popover', 'popover', 'popover:service');\n            application.inject('component:gh-popover-button', 'popover', 'popover:service');\n            application.inject('controller:modals.delete-post', 'popover', 'popover:service');\n            application.inject('controller:modals.transfer-owner', 'popover', 'popover:service');\n            application.inject('route:application', 'popover', 'popover:service');\n        }\n    };\n\n    __exports__[\"default\"] = popoverInitializer;\n  });",
    "define(\"ghost/initializers/store-injector\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    //Used to surgically insert the store into things that wouldn't normally have them.\n    var StoreInjector = {\n        name: 'store-injector',\n        after: 'store',\n        initialize: function (container, application) {\n            application.inject('component:gh-role-selector', 'store', 'store:main');\n        }\n    };\n\n    __exports__[\"default\"] = StoreInjector;\n  });",
    "define(\"ghost/initializers/trailing-history\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*global Ember */\n\n    var trailingHistory = Ember.HistoryLocation.extend({\n        formatURL: function () {\n            return this._super.apply(this, arguments).replace(/\\/?$/, '/');\n        }\n    });\n\n    var registerTrailingLocationHistory = {\n        name: 'registerTrailingLocationHistory',\n\n        initialize: function (container, application) {\n            application.register('location:trailing-history', trailingHistory);\n        }\n    };\n\n    __exports__[\"default\"] = registerTrailingLocationHistory;\n  });",
    "define(\"ghost/mixins/body-event-listener\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*\n    Code modified from Addepar/ember-widgets\n    https://github.com/Addepar/ember-widgets/blob/master/src/mixins.coffee#L39\n    */\n    var BodyEventListener = Ember.Mixin.create({\n        bodyElementSelector: 'html',\n        bodyClick: Ember.K,\n        init: function () {\n            this._super();\n            return Ember.run.next(this, this._setupDocumentHandlers);\n        },\n        willDestroy: function () {\n            this._super();\n            return this._removeDocumentHandlers();\n        },\n        _setupDocumentHandlers: function () {\n            if (this._clickHandler) {\n                return;\n            }\n            var self = this;\n            this._clickHandler = function () {\n                return self.bodyClick();\n            };\n            return $(this.get('bodyElementSelector')).on('click', this._clickHandler);\n        },\n        _removeDocumentHandlers: function () {\n            $(this.get('bodyElementSelector')).off('click', this._clickHandler);\n            this._clickHandler = null;\n        },\n        /* \n        http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element\n        */\n        click: function (event) {\n            return event.stopPropagation();\n        }\n    });\n\n    __exports__[\"default\"] = BodyEventListener;\n  });",
    "define(\"ghost/mixins/current-user-settings\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var CurrentUserSettings = Ember.Mixin.create({\n    \tcurrentUser: function () {\n    \t\treturn this.store.find('user', 'me');\n    \t},\n\n    \ttransitionAuthor: function () {\n    \t\tvar self = this;\n\n    \t\treturn function (user) {\n    \t\t\tif (user.get('isAuthor')) {\n    \t\t\t\treturn self.transitionTo('settings.users.user', user);\n    \t\t\t}\n\n    \t\t\treturn user;\n    \t\t};\n    \t},\n\n    \ttransitionEditor: function () {\n    \t\tvar self = this;\n\n    \t\treturn function (user) {\n    \t\t\tif (user.get('isEditor')) {\n    \t\t\t\treturn self.transitionTo('settings.users');\n    \t\t\t}\n\n    \t\t\treturn user;\n    \t\t};\n    \t}\n    });\n\n    __exports__[\"default\"] = CurrentUserSettings;\n  });",
    "define(\"ghost/mixins/editor-base-controller\", \n  [\"ghost/mixins/marker-manager\",\"ghost/models/post\",\"ghost/utils/bound-one-way\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /* global console */\n    var MarkerManager = __dependency1__[\"default\"];\n    var PostModel = __dependency2__[\"default\"];\n    var boundOneWay = __dependency3__[\"default\"];\n\n    // this array will hold properties we need to watch\n    // to know if the model has been changed (`controller.isDirty`)\n    var watchedProps = ['scratch', 'model.isDirty'];\n\n    Ember.get(PostModel, 'attributes').forEach(function (name) {\n        watchedProps.push('model.' + name);\n    });\n\n    // watch if number of tags changes on the model\n    watchedProps.push('tags.[]');\n\n    var EditorControllerMixin = Ember.Mixin.create(MarkerManager, {\n\n        needs: ['post-tags-input'],\n\n        init: function () {\n            var self = this;\n\n            this._super();\n\n            window.onbeforeunload = function () {\n                return self.get('isDirty') ? self.unloadDirtyMessage() : null;\n            };\n        },\n        /**\n         * By default, a post will not change its publish state.\n         * Only with a user-set value (via setSaveType action)\n         * can the post's status change.\n         */\n        willPublish: boundOneWay('isPublished'),\n\n        // set by the editor route and `isDirty`. useful when checking\n        // whether the number of tags has changed for `isDirty`.\n        previousTagNames: null,\n\n        tagNames: function () {\n            return this.get('tags').mapBy('name');\n        }.property('tags.[]'),\n\n        // compares previousTagNames to tagNames\n        tagNamesEqual: function () {\n            var tagNames = this.get('tagNames'),\n                previousTagNames = this.get('previousTagNames'),\n                hashCurrent,\n                hashPrevious;\n\n            // beware! even if they have the same length,\n            // that doesn't mean they're the same.\n            if (tagNames.length !== previousTagNames.length) {\n                return false;\n            }\n\n            // instead of comparing with slow, nested for loops,\n            // perform join on each array and compare the strings\n            hashCurrent = tagNames.join('');\n            hashPrevious = previousTagNames.join('');\n\n            return hashCurrent === hashPrevious;\n        },\n\n        // a hook created in editor-route-base's setupController\n        modelSaved: function () {\n            var model = this.get('model');\n\n            // safer to updateTags on save in one place\n            // rather than in all other places save is called\n            model.updateTags();\n\n            // set previousTagNames to current tagNames for isDirty check\n            this.set('previousTagNames', this.get('tagNames'));\n\n            // `updateTags` triggers `isDirty => true`.\n            // for a saved model it would otherwise be false.\n            this.set('isDirty', false);\n        },\n\n        // an ugly hack, but necessary to watch all the model's properties\n        // and more, without having to be explicit and do it manually\n        isDirty: Ember.computed.apply(Ember, watchedProps.concat(function (key, value) {\n            if (arguments.length > 1) {\n                return value;\n            }\n\n            var model = this.get('model'),\n                markdown = this.get('markdown'),\n                title = this.get('title'),\n                titleScratch = this.get('titleScratch'),\n                scratch = this.getMarkdown().withoutMarkers,\n                changedAttributes;\n\n            if (!this.tagNamesEqual()) {\n                return true;\n            }\n\n            if (titleScratch !== title) {\n                return true;\n            }\n\n            // since `scratch` is not model property, we need to check\n            // it explicitly against the model's markdown attribute\n            if (markdown !== scratch) {\n                return true;\n            }\n\n            // models created on the client always return `isDirty: true`,\n            // so we need to see which properties have actually changed.\n            if (model.get('isNew')) {\n                changedAttributes = Ember.keys(model.changedAttributes());\n\n                if (changedAttributes.length) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            // even though we use the `scratch` prop to show edits,\n            // which does *not* change the model's `isDirty` property,\n            // `isDirty` will tell us if the other props have changed,\n            // as long as the model is not new (model.isNew === false).\n            if (model.get('isDirty')) {\n                return true;\n            }\n\n            return false;\n        })),\n\n        // used on window.onbeforeunload\n        unloadDirtyMessage: function () {\n            return '==============================\\n\\n' +\n                'Hey there! It looks like you\\'re in the middle of writing' +\n                ' something and you haven\\'t saved all of your content.' +\n                '\\n\\nSave before you go!\\n\\n' +\n                '==============================';\n        },\n\n        //TODO: This has to be moved to the I18n localization file.\n        //This structure is supposed to be close to the i18n-localization which will be used soon.\n        messageMap: {\n            errors: {\n                post: {\n                    published: {\n                        'published': 'Update failed.',\n                        'draft': 'Saving failed.'\n                    },\n                    draft: {\n                        'published': 'Publish failed.',\n                        'draft': 'Saving failed.'\n                    }\n\n                }\n            },\n\n            success: {\n                post: {\n                    published: {\n                        'published': 'Updated.',\n                        'draft': 'Saved.'\n                    },\n                    draft: {\n                        'published': 'Published!',\n                        'draft': 'Saved.'\n                    }\n                }\n            }\n        },\n\n        showSaveNotification: function (prevStatus, status, delay) {\n            var message = this.messageMap.success.post[prevStatus][status];\n\n            this.notifications.showSuccess(message, { delayed: delay });\n        },\n\n        showErrorNotification: function (prevStatus, status, errors, delay) {\n            var message = this.messageMap.errors.post[prevStatus][status];\n\n            message += '<br />' + errors[0].message;\n\n            this.notifications.showError(message, { delayed: delay });\n        },\n\n        shouldFocusTitle: Ember.computed('model', function () {\n            return !!this.get('model.isNew');\n        }),\n\n        actions: {\n            save: function () {\n                var status = this.get('willPublish') ? 'published' : 'draft',\n                    prevStatus = this.get('status'),\n                    isNew = this.get('isNew'),\n                    self = this;\n\n                self.notifications.closePassive();\n\n                // ensure an incomplete tag is finalised before save\n                this.get('controllers.post-tags-input').send('addNewTag');\n\n                // Set the properties that are indirected\n                // set markdown equal to what's in the editor, minus the image markers.\n                this.set('markdown', this.getMarkdown().withoutMarkers);\n                this.set('title', this.get('titleScratch'));\n                this.set('status', status);\n\n                return this.get('model').save().then(function (model) {\n                    self.showSaveNotification(prevStatus, model.get('status'), isNew ? true : false);\n                    return model;\n                }).catch(function (errors) {\n                    self.showErrorNotification(prevStatus, self.get('status'), errors);\n                    return Ember.RSVP.reject(errors);\n                });\n            },\n\n            setSaveType: function (newType) {\n                if (newType === 'publish') {\n                    this.set('willPublish', true);\n                } else if (newType === 'draft') {\n                    this.set('willPublish', false);\n                } else {\n                    console.warn('Received invalid save type; ignoring.');\n                }\n            },\n\n            // set from a `sendAction` on the codemirror component,\n            // so that we get a reference for handling uploads.\n            setCodeMirror: function (codemirrorComponent) {\n                var codemirror = codemirrorComponent.get('codemirror');\n\n                this.set('codemirrorComponent', codemirrorComponent);\n                this.set('codemirror', codemirror);\n            },\n\n            // fired from the gh-markdown component when an image upload starts\n            disableCodeMirror: function () {\n                this.get('codemirrorComponent').disableCodeMirror();\n            },\n\n            // fired from the gh-markdown component when an image upload finishes\n            enableCodeMirror: function () {\n                this.get('codemirrorComponent').enableCodeMirror();\n            },\n\n            // Match the uploaded file to a line in the editor, and update that line with a path reference\n            // ensuring that everything ends up in the correct place and format.\n            handleImgUpload: function (e, result_src) {\n                var editor = this.get('codemirror'),\n                    line = this.findLine(Ember.$(e.currentTarget).attr('id')),\n                    lineNumber = editor.getLineNumber(line),\n                    match = line.text.match(/\\([^\\n]*\\)?/),\n                    replacement = '(http://)';\n\n                if (match) {\n                    // simple case, we have the parenthesis\n                    editor.setSelection(\n                        {line: lineNumber, ch: match.index + 1},\n                        {line: lineNumber, ch: match.index + match[0].length - 1}\n                    );\n                } else {\n                    match = line.text.match(/\\]/);\n                    if (match) {\n                        editor.replaceRange(\n                            replacement,\n                            {line: lineNumber, ch: match.index + 1},\n                            {line: lineNumber, ch: match.index + 1}\n                        );\n                        editor.setSelection(\n                            {line: lineNumber, ch: match.index + 2},\n                            {line: lineNumber, ch: match.index + replacement.length }\n                        );\n                    }\n                }\n                editor.replaceSelection(result_src);\n            }\n        }\n    });\n\n    __exports__[\"default\"] = EditorControllerMixin;\n  });",
    "define(\"ghost/mixins/editor-base-view\", \n  [\"ghost/utils/set-scroll-classname\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var setScrollClassName = __dependency1__[\"default\"];\n\n    var EditorViewMixin = Ember.Mixin.create({\n        // create a hook for jQuery logic that will run after\n        // a view and all child views have been rendered,\n        // since didInsertElement runs only when the view's el\n        // has rendered, and not necessarily all child views.\n        //\n        // http://mavilein.github.io/javascript/2013/08/01/Ember-JS-After-Render-Event/\n        // http://emberjs.com/api/classes/Ember.run.html#method_next\n        scheduleAfterRender: function () {\n            Ember.run.scheduleOnce('afterRender', this, this.afterRenderEvent);\n        }.on('didInsertElement'),\n\n        // all child views will have rendered when this fires\n        afterRenderEvent: function () {\n            var $previewViewPort = this.$('.entry-preview-content');\n\n            // cache these elements for use in other methods\n            this.set('$previewViewPort', $previewViewPort);\n            this.set('$previewContent', this.$('.rendered-markdown'));\n\n            $previewViewPort.scroll(Ember.run.bind($previewViewPort, setScrollClassName, {\n                target: this.$('.entry-preview'),\n                offset: 10\n            }));\n        },\n\n        removeScrollHandlers: function () {\n            this.get('$previewViewPort').off('scroll');\n        }.on('willDestroyElement'),\n\n        // updated when gh-codemirror component scrolls\n        markdownScrollInfo: null,\n\n        // percentage of scroll position to set htmlPreview\n        scrollPosition: Ember.computed('markdownScrollInfo', function () {\n            if (!this.get('markdownScrollInfo')) {\n                return 0;\n            }\n\n            var scrollInfo = this.get('markdownScrollInfo'),\n                codemirror = scrollInfo.codemirror,\n                markdownHeight = scrollInfo.height - scrollInfo.clientHeight,\n                previewHeight = this.get('$previewContent').height() - this.get('$previewViewPort').height(),\n                ratio = previewHeight / markdownHeight,\n                previewPosition = scrollInfo.top * ratio,\n                isCursorAtEnd = codemirror.getCursor('end').line > codemirror.lineCount() - 5;\n\n            if (isCursorAtEnd) {\n                previewPosition = previewHeight + 30;\n            }\n\n            return previewPosition;\n        })\n    });\n\n    __exports__[\"default\"] = EditorViewMixin;\n  });",
    "define(\"ghost/mixins/editor-route-base\", \n  [\"ghost/mixins/shortcuts-route\",\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"ghost/utils/editor-shortcuts\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var ShortcutsRoute = __dependency1__[\"default\"];\n    var styleBody = __dependency2__[\"default\"];\n    var loadingIndicator = __dependency3__[\"default\"];\n    var editorShortcuts = __dependency4__[\"default\"];\n\n    var EditorRouteBase = Ember.Mixin.create(styleBody, ShortcutsRoute, loadingIndicator, {\n        actions: {\n            save: function () {\n                this.get('controller').send('save');\n            },\n            publish: function () {\n                var controller = this.get('controller');\n                controller.send('setSaveType', 'publish');\n                controller.send('save');\n            },\n            toggleZenMode: function () {\n                Ember.$('body').toggleClass('zen');\n            },\n            //The actual functionality is implemented in utils/codemirror-shortcuts\n            codeMirrorShortcut: function (options) {\n                this.get('controller.codemirror').shortcut(options.type);\n            }\n        },\n\n        shortcuts: editorShortcuts,\n\n        attachModelHooks: function (controller, model) {\n            // this will allow us to track when the model is saved and update the controller\n            // so that we can be sure controller.isDirty is correct, without having to update the\n            // controller on each instance of `model.save()`.\n            //\n            // another reason we can't do this on `model.save().then()` is because the post-settings-menu\n            // also saves the model, and passing messages is difficult because we have two\n            // types of editor controllers, and the PSM also exists on the posts.post route.\n            //\n            // The reason we can't just keep this functionality in the editor controller is\n            // because we need to remove these handlers on `willTransition` in the editor route.\n            model.on('didCreate', controller, controller.get('modelSaved'));\n            model.on('didUpdate', controller, controller.get('modelSaved'));\n        },\n\n        detachModelHooks: function (controller, model) {\n            model.off('didCreate', controller, controller.get('modelSaved'));\n            model.off('didUpdate', controller, controller.get('modelSaved'));\n        }\n    });\n\n    __exports__[\"default\"] = EditorRouteBase;\n  });",
    "define(\"ghost/mixins/loading-indicator\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // mixin used for routes to display a loading indicator when there is network activity\n    var loaderOptions = {\n        'showSpinner': false\n    };\n    NProgress.configure(loaderOptions);\n\n    var loadingIndicator = Ember.Mixin.create({\n        actions:  {\n\n            loading: function () {\n                NProgress.start();\n                this.router.one('didTransition', function () {\n                    NProgress.done();\n                });\n                return true;\n            },\n\n            error: function () {\n                NProgress.done();\n                return true;\n            }\n        }\n    });\n\n    __exports__[\"default\"] = loadingIndicator;\n  });",
    "define(\"ghost/mixins/marker-manager\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var MarkerManager = Ember.Mixin.create({\n        imageMarkdownRegex: /^(?:\\{<(.*?)>\\})?!(?:\\[([^\\n\\]]*)\\])(?:\\(([^\\n\\]]*)\\))?$/gim,\n        markerRegex: /\\{<([\\w\\W]*?)>\\}/,\n\n        uploadId: 1,\n\n        // create an object that will be shared amongst instances.\n        // makes it easier to use helper functions in different modules\n        markers: {},\n\n        // Add markers to the line if it needs one\n        initMarkers: function (line) {\n            var imageMarkdownRegex = this.get('imageMarkdownRegex'),\n                markerRegex = this.get('markerRegex'),\n                editor = this.get('codemirror'),\n                isImage = line.text.match(imageMarkdownRegex),\n                hasMarker = line.text.match(markerRegex);\n\n            if (isImage && !hasMarker) {\n                this.addMarker(line, editor.getLineNumber(line));\n            }\n        },\n\n        // Get the markdown with all the markers stripped\n        getMarkdown: function (value) {\n            var marker, id,\n                editor = this.get('codemirror'),\n                markers = this.get('markers'),\n                markerRegexForId = this.get('markerRegexForId'),\n                oldValue = value || editor.getValue(),\n                newValue = oldValue;\n\n            for (id in markers) {\n                if (markers.hasOwnProperty(id)) {\n                    marker = markers[id];\n                    newValue = newValue.replace(markerRegexForId(id), '');\n                }\n            }\n\n            return {\n                withMarkers: oldValue,\n                withoutMarkers: newValue\n            };\n        },\n\n        // check the given line to see if it has an image, and if it correctly has a marker\n        // in the special case of lines which were just pasted in, any markers are removed to prevent duplication\n        checkLine: function (ln, mode) {\n            var editor = this.get('codemirror'),\n                line = editor.getLineHandle(ln),\n                imageMarkdownRegex = this.get('imageMarkdownRegex'),\n                markerRegex = this.get('markerRegex'),\n                isImage = line.text.match(imageMarkdownRegex),\n                hasMarker;\n\n            // We care if it is an image\n            if (isImage) {\n                hasMarker = line.text.match(markerRegex);\n\n                if (hasMarker && (mode === 'paste' || mode === 'undo')) {\n                    // this could be a duplicate, and won't be a real marker\n                    this.stripMarkerFromLine(line);\n                }\n\n                if (!hasMarker) {\n                    this.addMarker(line, ln);\n                }\n            }\n            // TODO: hasMarker but no image?\n        },\n\n        // Add a marker to the given line\n        // Params:\n        // line - CodeMirror LineHandle\n        // ln - line number\n        addMarker: function (line, ln) {\n            var marker,\n                markers = this.get('markers'),\n                editor = this.get('codemirror'),\n                uploadPrefix = 'image_upload',\n                uploadId = this.get('uploadId'),\n                magicId = '{<' + uploadId + '>}',\n                newText = magicId + line.text;\n\n            editor.replaceRange(\n                newText,\n                {line: ln, ch: 0},\n                {line: ln, ch: newText.length}\n            );\n\n            marker = editor.markText(\n                {line: ln, ch: 0},\n                {line: ln, ch: (magicId.length)},\n                {collapsed: true}\n            );\n\n            markers[uploadPrefix + '_' + uploadId] = marker;\n            this.set('uploadId', uploadId += 1);\n        },\n\n        // Check each marker to see if it is still present in the editor and if it still corresponds to image markdown\n        // If it is no longer a valid image, remove it\n        checkMarkers: function () {\n            var id, marker, line,\n                editor = this.get('codemirror'),\n                markers = this.get('markers'),\n                imageMarkdownRegex = this.get('imageMarkdownRegex');\n\n            for (id in markers) {\n                if (markers.hasOwnProperty(id)) {\n                    marker = markers[id];\n\n                    if (marker.find()) {\n                        line = editor.getLineHandle(marker.find().from.line);\n                        if (!line.text.match(imageMarkdownRegex)) {\n                            this.removeMarker(id, marker, line);\n                        }\n                    } else {\n                        this.removeMarker(id, marker);\n                    }\n                }\n            }\n        },\n\n        // this is needed for when we transition out of the editor.\n        // since the markers object is persistent and shared between classes that\n        // mix in this mixin, we need to make sure markers don't carry over between edits.\n        clearMarkers: function () {\n            var markers = this.get('markers'),\n                id,\n                marker;\n\n            // can't just `this.set('markers', {})`,\n            // since it wouldn't apply to this mixin,\n            // but only to the class that mixed this mixin in\n            for (id in markers) {\n                if (markers.hasOwnProperty(id)) {\n                    marker = markers[id];\n                    delete markers[id];\n                    marker.clear();\n                }\n            }\n        },\n\n        // Remove a marker\n        // Will be passed a LineHandle if we already know which line the marker is on\n        removeMarker: function (id, marker, line) {\n            var markers = this.get('markers');\n\n            delete markers[id];\n            marker.clear();\n\n            if (line) {\n                this.stripMarkerFromLine(line);\n            } else {\n                this.findAndStripMarker(id);\n            }\n        },\n\n        // Removes the marker on the given line if there is one\n        stripMarkerFromLine: function (line) {\n            var editor = this.get('codemirror'),\n                ln = editor.getLineNumber(line),\n                markerRegex = /\\{<([\\w\\W]*?)>\\}/,\n                markerText = line.text.match(markerRegex);\n\n\n            if (markerText) {\n                editor.replaceRange(\n                    '',\n                    {line: ln, ch: markerText.index},\n                    {line: ln, ch: markerText.index + markerText[0].length}\n                );\n            }\n        },\n\n        // the regex\n        markerRegexForId: function (id) {\n            id = id.replace('image_upload_', '');\n            return new RegExp('\\\\{<' + id + '>\\\\}', 'gmi');\n        },\n\n        // Find a marker in the editor by id & remove it\n        // Goes line by line to find the marker by it's text if we've lost track of the TextMarker\n        findAndStripMarker: function (id) {\n            var self = this,\n                editor = this.get('codemirror');\n\n            editor.eachLine(function (line) {\n                var markerText = self.markerRegexForId(id).exec(line.text),\n                    ln;\n\n                if (markerText) {\n                    ln = editor.getLineNumber(line);\n                    editor.replaceRange(\n                        '',\n                        {line: ln, ch: markerText.index},\n                        {line: ln, ch: markerText.index + markerText[0].length}\n                    );\n                }\n            });\n        },\n\n        // Find the line with the marker which matches\n        findLine: function (result_id) {\n            var editor = this.get('codemirror'),\n                markers = this.get('markers');\n\n            // try to find the right line to replace\n            if (markers.hasOwnProperty(result_id) && markers[result_id].find()) {\n                return editor.getLineHandle(markers[result_id].find().from.line);\n            }\n\n            return false;\n        }\n    });\n\n    __exports__[\"default\"] = MarkerManager;\n  });",
    "define(\"ghost/mixins/nprogress-save\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NProgressSaveMixin = Ember.Mixin.create({\n        save: function (options) {\n            if (options && options.disableNProgress) {\n                return this._super(options);\n            }\n            \n            NProgress.start();\n            return this._super(options).then(function (value) {\n                NProgress.done();\n                return value;\n            }).catch(function (error) {\n                NProgress.done();\n                return Ember.RSVP.reject(error);\n            });\n        }\n    });\n\n    __exports__[\"default\"] = NProgressSaveMixin;\n  });",
    "define(\"ghost/mixins/pagination-controller\", \n  [\"ghost/utils/ajax\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var getRequestErrorMessage = __dependency1__.getRequestErrorMessage;\n\n    var PaginationControllerMixin = Ember.Mixin.create({\n\n        // set from PaginationRouteMixin\n        paginationSettings: null,\n\n        // holds the next page to load during infinite scroll\n        nextPage: null,\n\n        // indicates whether we're currently loading the next page\n        isLoading: null,\n\n        /**\n         *\n         * @param options: {\n         *                      modelType: <String> name of the model that will be paginated\n         *                  }\n         */\n        init: function (options) {\n            this._super();\n\n            var metadata = this.store.metadataFor(options.modelType);\n            this.set('nextPage', metadata.pagination.next);\n        },\n\n\n        /**\n         * Takes an ajax response, concatenates any error messages, then generates an error notification.\n         * @param {jqXHR} response The jQuery ajax reponse object.\n         * @return\n         */\n        reportLoadError: function (response) {\n            var message = 'A problem was encountered while loading more records';\n\n            if (response) {\n                // Get message from response\n                message += ': ' + getRequestErrorMessage(response, true);\n            } else {\n                message += '.';\n            }\n\n            this.notifications.showError(message);\n        },\n\n        actions: {\n            /**\n             * Loads the next paginated page of posts into the ember-data store. Will cause the posts list UI to update.\n             * @return\n             */\n            loadNextPage: function () {\n\n                var self = this,\n                    store = this.get('store'),\n                    recordType = this.get('model').get('type'),\n                    nextPage = this.get('nextPage'),\n                    paginationSettings = this.get('paginationSettings');\n\n                if (nextPage) {\n                    this.set('isLoading', true);\n                    this.set('paginationSettings.page', nextPage);\n                    store.find(recordType, paginationSettings).then(function () {\n                        var metadata = store.metadataFor(recordType);\n\n                        self.set('nextPage', metadata.pagination.next);\n                        self.set('isLoading', false);\n                    }, function (response) {\n                        self.reportLoadError(response);\n                    });\n                }\n            }\n        }\n\n    });\n\n    __exports__[\"default\"] = PaginationControllerMixin;\n  });",
    "define(\"ghost/mixins/pagination-route\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var defaultPaginationSettings = {\n        page: 1,\n        limit: 15\n    };\n\n    var PaginationRoute = Ember.Mixin.create({\n\n        /**\n         * Sets up pagination details\n         * @param {settings}: object that specifies additional pagination details\n         */\n        setupPagination: function (settings) {\n\n            settings = settings || {};\n            settings = _.defaults(settings, defaultPaginationSettings);\n\n            this.set('paginationSettings', settings);\n            this.controller.set('paginationSettings', settings);\n        }\n\n    });\n\n    __exports__[\"default\"] = PaginationRoute;\n  });",
    "define(\"ghost/mixins/pagination-view-infinite-scroll\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PaginationViewInfiniteScrollMixin = Ember.Mixin.create({\n\n        /**\n         * Determines if we are past a scroll point where we need to fetch the next page\n         * @param event The scroll event\n         */\n        checkScroll: function (event) {\n            var element = event.target,\n                triggerPoint = 100,\n                controller = this.get('controller'),\n                isLoading = controller.get('isLoading');\n\n            // If we haven't passed our threshold or we are already fetching content, exit\n            if (isLoading || (element.scrollTop + element.clientHeight + triggerPoint <= element.scrollHeight)) {\n                return;\n            }\n\n            controller.send('loadNextPage');\n        },\n\n        /**\n         * Bind to the scroll event once the element is in the DOM\n         */\n        didInsertElement: function () {\n            var el = this.$();\n\n            el.on('scroll', Ember.run.bind(this, this.checkScroll));\n        },\n\n        /**\n         * Unbind from the scroll event when the element is no longer in the DOM\n         */\n        willDestroyElement: function () {\n            var el = this.$();\n            el.off('scroll');\n        }\n    });\n\n    __exports__[\"default\"] = PaginationViewInfiniteScrollMixin;\n  });",
    "define(\"ghost/mixins/popover-mixin\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*\n      Popovers and their buttons are evented and do not propagate clicks.\n    */\n    var PopoverMixin = Ember.Mixin.create(Ember.Evented, {\n        classNameBindings: ['isOpen:open'],\n        isOpen: false,\n        click: function (event) {\n            this._super(event);\n            return event.stopPropagation();\n        }\n    });\n\n    __exports__[\"default\"] = PopoverMixin;\n  });",
    "define(\"ghost/mixins/selective-save\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // SelectiveSaveMixin adds a saveOnly method to a DS.Model.\n    //\n    // saveOnly provides a way to save one or more properties of a model while\n    // preserving outstanding changes to other properties.\n    var SelectiveSaveMixin = Ember.Mixin.create({\n        saveOnly: function () {\n            if (arguments.length === 0) {\n                return Ember.RSVP.resolve();\n            }\n\n            if (arguments.length === 1 && Ember.isArray(arguments[0])) {\n                return this.saveOnly.apply(this, Array.prototype.slice.call(arguments[0]));\n            }\n\n            var propertiesToSave = Array.prototype.slice.call(arguments),\n                changed,\n                hasMany = {},\n                belongsTo = {},\n                self = this;\n\n            changed = this.changedAttributes();\n\n            // disable observers so we can make changes to the model but not have\n            // them reflected by the UI\n            this.beginPropertyChanges();\n\n            // make a copy of any relations the model may have so they can\n            // be reapplied later\n            this.eachRelationship(function (name, meta) {\n                if (meta.kind === 'hasMany') {\n                    hasMany[name] = self.get(name).slice();\n                    return;\n                }\n\n                if (meta.kind === 'belongsTo') {\n                    belongsTo[name] = self.get(name);\n                    return;\n                }\n            });\n\n            try {\n                // roll back all changes to the model and then reapply only those that\n                // are part of the saveOnly\n\n                self.rollback();\n\n                propertiesToSave.forEach(function (name) {\n                    if (hasMany.hasOwnProperty(name)) {\n                        self.get(name).clear();\n\n                        hasMany[name].forEach(function (relatedType) {\n                            self.get(name).pushObject(relatedType);\n                        });\n\n                        return;\n                    }\n\n                    if (belongsTo.hasOwnProperty(name)) {\n                        return self.updateBelongsTo(name, belongsTo[name]);\n                    }\n\n                    if (changed.hasOwnProperty(name)) {\n                        return self.set(name, changed[name][1]);\n                    }\n                });\n            }\n            catch (err) {\n                // if we were not able to get the model into the correct state\n                // put it back the way we found it and return a rejected promise\n\n                Ember.keys(changed).forEach(function (name) {\n                    self.set(name, changed[name][1]);\n                });\n\n                Ember.keys(hasMany).forEach(function (name) {\n                    self.updateHasMany(name, hasMany[name]);\n                });\n\n                Ember.keys(belongsTo).forEach(function (name) {\n                    self.updateBelongsTo(name, belongsTo[name]);\n                });\n\n                self.endPropertyChanges();\n\n                return Ember.RSVP.reject(new Error(err.message || 'Error during saveOnly. Changes NOT saved.'));\n            }\n\n            return this.save().finally(function () {\n                // reapply any changes that were not part of the save\n\n                Ember.keys(changed).forEach(function (name) {\n                    if (propertiesToSave.hasOwnProperty(name)) {\n                        return;\n                    }\n\n                    self.set(name, changed[name][1]);\n                });\n\n                Ember.keys(hasMany).forEach(function (name) {\n                    if (propertiesToSave.hasOwnProperty(name)) {\n                        return;\n                    }\n\n                    self.updateHasMany(name, hasMany[name]);\n                });\n\n                Ember.keys(belongsTo).forEach(function (name) {\n                    if (propertiesToSave.hasOwnProperty(name)) {\n                        return;\n                    }\n\n                    self.updateBelongsTo(name, belongsTo[name]);\n                });\n\n                // signal that we're finished and normal model observation may continue\n                self.endPropertyChanges();\n            });\n        }\n    });\n\n    __exports__[\"default\"] = SelectiveSaveMixin;\n  });",
    "define(\"ghost/mixins/shortcuts-route\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global key, console */\n\n    //Configure KeyMaster to respond to all shortcuts,\n    //even inside of\n    //input, textarea, and select.\n    key.filter = function () {\n        return true;\n    };\n\n    /**\n     * Only routes can implement shortcuts.\n     * If you need to trigger actions on the controller,\n     * simply call them with `this.get('controller').send('action')`.\n     *\n     * To implement shortcuts, add this mixin to your `extend()`,\n     * and implement a `shortcuts` hash.\n     * In this hash, keys are shortcut combinations and values are route action names.\n     *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),\n     * \n     * ```javascript\n     * shortcuts: {\n     *     'ctrl+s, command+s': 'save',\n     *     'ctrl+alt+z': 'toggleZenMode'\n     * }\n     * ```\n     * For more complex actions, shortcuts can instead have their value\n     * be an object like {action, options}\n     * ```javascript\n     * shortcuts: {\n     *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}\n     * }\n     * ```\n     */\n    var ShortcutsRoute = Ember.Mixin.create({\n        registerShortcuts: function () {\n            var self = this,\n                shortcuts = this.get('shortcuts');\n\n            Ember.keys(shortcuts).forEach(function (shortcut) {\n                key(shortcut, function (event) {\n                    var action = shortcuts[shortcut],\n                        options;\n                    if (Ember.typeOf(action) !== 'string') {\n                        options = action.options;\n                        action = action.action;\n                    }\n                    \n                    //stop things like ctrl+s from actually opening a save dialogue\n                    event.preventDefault();\n                    self.send(action, options);\n                });\n            });\n        },\n        removeShortcuts: function () {\n            var shortcuts = this.get('shortcuts');\n\n            Ember.keys(shortcuts).forEach(function (shortcut) {\n                key.unbind(shortcut);\n            });\n        },\n        activate: function () {\n            this._super();\n            if (!this.shortcuts) {\n                console.error('Shortcuts not found on route');\n                return;\n            }\n            this.registerShortcuts();\n        },\n        deactivate: function () {\n            this._super();\n            this.removeShortcuts();\n        }\n    });\n\n    __exports__[\"default\"] = ShortcutsRoute;\n  });",
    "define(\"ghost/mixins/style-body\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // mixin used for routes that need to set a css className on the body tag\n\n    var styleBody = Ember.Mixin.create({\n        activate: function () {\n            this._super();\n            var cssClasses = this.get('classNames');\n\n            if (cssClasses) {\n                Ember.run.schedule('afterRender', null, function () {\n                    cssClasses.forEach(function (curClass) {\n                        Ember.$('body').addClass(curClass);\n                    });\n                });\n            }\n        },\n\n        deactivate: function () {\n            this._super();\n            var cssClasses = this.get('classNames');\n\n            Ember.run.schedule('afterRender', null, function () {\n                cssClasses.forEach(function (curClass) {\n                    Ember.$('body').removeClass(curClass);\n                });\n            });\n        }\n    });\n\n    __exports__[\"default\"] = styleBody;\n  });",
    "define(\"ghost/mixins/validation-engine\", \n  [\"ghost/utils/ajax\",\"ghost/utils/validator-extensions\",\"ghost/validators/post\",\"ghost/validators/setup\",\"ghost/validators/signup\",\"ghost/validators/signin\",\"ghost/validators/forgotten\",\"ghost/validators/setting\",\"ghost/validators/reset\",\"ghost/validators/user\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __exports__) {\n    \"use strict\";\n    var getRequestErrorMessage = __dependency1__.getRequestErrorMessage;\n\n    var ValidatorExtensions = __dependency2__[\"default\"];\n    var PostValidator = __dependency3__[\"default\"];\n    var SetupValidator = __dependency4__[\"default\"];\n    var SignupValidator = __dependency5__[\"default\"];\n    var SigninValidator = __dependency6__[\"default\"];\n    var ForgotValidator = __dependency7__[\"default\"];\n    var SettingValidator = __dependency8__[\"default\"];\n    var ResetValidator = __dependency9__[\"default\"];\n    var UserValidator = __dependency10__[\"default\"];\n\n    // our extensions to the validator library\n    ValidatorExtensions.init();\n\n    // format errors to be used in `notifications.showErrors`.\n    // result is [{ message: 'concatenated error messages' }]\n    function formatErrors(errors, opts) {\n        var message = 'There was an error';\n\n        opts = opts || {};\n\n        if (opts.wasSave && opts.validationType) {\n            message += ' saving this ' + opts.validationType;\n        }\n\n        if (Ember.isArray(errors)) {\n            // get the validator's error messages from the array.\n            // normalize array members to map to strings.\n            message = errors.map(function (error) {\n                if (typeof error === 'string') {\n                    return error;\n                }\n\n                return error.message;\n            }).join('<br />');\n        } else if (errors instanceof Error) {\n            message += errors.message || '.';\n        } else if (typeof errors === 'object') {\n            // Get messages from server response\n            message += ': ' + getRequestErrorMessage(errors, true);\n        } else if (typeof errors === 'string') {\n            message += ': ' + errors;\n        } else {\n            message += '.';\n        }\n\n        // set format for notifications.showErrors\n        message = [{ message: message }];\n\n        return message;\n    }\n\n\n    /**\n    * The class that gets this mixin will receive these properties and functions.\n    * It will be able to validate any properties on itself (or the model it passes to validate())\n    * with the use of a declared validator.\n    */\n    var ValidationEngine = Ember.Mixin.create({\n        // these validators can be passed a model to validate when the class that\n        // mixes in the ValidationEngine declares a validationType equal to a key on this object.\n        // the model is either passed in via `this.validate({ model: object })`\n        // or by calling `this.validate()` without the model property.\n        // in that case the model will be the class that the ValidationEngine\n        // was mixed into, i.e. the controller or Ember Data model.\n        validators: {\n            post: PostValidator,\n            setup: SetupValidator,\n            signup: SignupValidator,\n            signin: SigninValidator,\n            forgotten: ForgotValidator,\n            setting: SettingValidator,\n            reset: ResetValidator,\n            user: UserValidator\n        },\n\n        /**\n        * Passses the model to the validator specified by validationType.\n        * Returns a promise that will resolve if validation succeeds, and reject if not.\n        * Some options can be specified:\n        *\n        * `format: false` - doesn't use formatErrors to concatenate errors for notifications.showErrors.\n        *                   will return whatever the specified validator returns.\n        *                   since notifications are a common usecase, `format` is true by default.\n        *\n        * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,\n        *                   the class that mixes in this mixin.\n        */\n        validate: function (opts) {\n            var model = opts.model || this,\n                type = this.get('validationType'),\n                validator = this.get('validators.' + type);\n\n            opts = opts || {};\n            opts.validationType = type;\n\n            return new Ember.RSVP.Promise(function (resolve, reject) {\n                var validationErrors;\n\n                if (!type || !validator) {\n                    validationErrors = ['The validator specified, \"' + type + '\", did not exist!'];\n                } else {\n                    validationErrors = validator.check(model);\n                }\n\n                if (Ember.isEmpty(validationErrors)) {\n                    return resolve();\n                }\n\n                if (opts.format !== false) {\n                    validationErrors = formatErrors(validationErrors, opts);\n                }\n\n                return reject(validationErrors);\n            });\n        },\n\n        /**\n        * The primary goal of this method is to override the `save` method on Ember Data models.\n        * This allows us to run validation before actually trying to save the model to the server.\n        * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.\n        */\n        save: function (options) {\n            var self = this,\n                // this is a hack, but needed for async _super calls.\n                // ref: https://github.com/emberjs/ember.js/pull/4301\n                _super = this.__nextSuper;\n\n            options = options || {};\n            options.wasSave = true;\n\n            // model.destroyRecord() calls model.save() behind the scenes.\n            // in that case, we don't need validation checks or error propagation,\n            // because the model itself is being destroyed.\n            if (this.get('isDeleted')) {\n                return this._super();\n            }\n\n            // If validation fails, reject with validation errors.\n            // If save to the server fails, reject with server response.\n            return this.validate(options).then(function () {\n                return _super.call(self, options);\n            }).catch(function (result) {\n                // server save failed - validate() would have given back an array\n                if (! Ember.isArray(result)) {\n                    if (options.format !== false) {\n                        // concatenate all errors into an array with a single object: [{ message: 'concatted message' }]\n                        result = formatErrors(result, options);\n                    } else {\n                        // return the array of errors from the server\n                        result = getRequestErrorMessage(result);\n                    }\n                }\n\n                return Ember.RSVP.reject(result);\n            });\n        }\n    });\n\n    __exports__[\"default\"] = ValidationEngine;\n  });",
    "define(\"ghost/models/notification\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Notification = DS.Model.extend({\n        dismissible: DS.attr('boolean'),\n        location: DS.attr('string'),\n        status: DS.attr('string'),\n        type: DS.attr('string'),\n        message: DS.attr('string')\n    });\n\n    __exports__[\"default\"] = Notification;\n  });",
    "define(\"ghost/models/post\", \n  [\"ghost/mixins/validation-engine\",\"ghost/utils/bound-one-way\",\"ghost/mixins/nprogress-save\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var ValidationEngine = __dependency1__[\"default\"];\n    var boundOneWay = __dependency2__[\"default\"];\n    var NProgressSaveMixin = __dependency3__[\"default\"];\n\n    var Post = DS.Model.extend(NProgressSaveMixin, ValidationEngine, {\n        validationType: 'post',\n\n        uuid: DS.attr('string'),\n        title: DS.attr('string', {defaultValue: ''}),\n        slug: DS.attr('string'),\n        markdown: DS.attr('string', {defaultValue: ''}),\n        html: DS.attr('string'),\n        image: DS.attr('string'),\n        featured: DS.attr('boolean', {defaultValue: false}),\n        page: DS.attr('boolean', {defaultValue: false}),\n        status: DS.attr('string', {defaultValue: 'draft'}),\n        language: DS.attr('string', {defaultValue: 'en_US'}),\n        meta_title: DS.attr('string'),\n        meta_description: DS.attr('string'),\n        author: DS.belongsTo('user',  { async: true }),\n        author_id: DS.attr('number'),\n        updated_at: DS.attr('moment-date'),\n        published_at: DS.attr('moment-date'),\n        published_by: DS.belongsTo('user', { async: true }),\n        tags: DS.hasMany('tag', { embedded: 'always' }),\n        titleScratch: boundOneWay('title'),\n        //## Computed post properties\n        isPublished: Ember.computed.equal('status', 'published'),\n        isDraft: Ember.computed.equal('status', 'draft'),\n\n        // remove client-generated tags, which have `id: null`.\n        // Ember Data won't recognize/update them automatically\n        // when returned from the server with ids.\n        updateTags: function () {\n            var tags = this.get('tags'),\n            oldTags = tags.filterBy('id', null);\n\n            tags.removeObjects(oldTags);\n            oldTags.invoke('deleteRecord');\n        },\n\n        isAuthoredByUser: function (user) {\n            return parseInt(user.get('id'), 10) === parseInt(this.get('author_id'), 10);\n        }\n\n    });\n\n    __exports__[\"default\"] = Post;\n  });",
    "define(\"ghost/models/role\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Role = DS.Model.extend({\n        uuid: DS.attr('string'),\n        name: DS.attr('string'),\n        description: DS.attr('string'),\n        created_at: DS.attr('moment-date'),\n        updated_at: DS.attr('moment-date'),\n\n        lowerCaseName: Ember.computed('name', function () {\n            return this.get('name').toLocaleLowerCase();\n        })\n    });\n\n    __exports__[\"default\"] = Role;\n  });",
    "define(\"ghost/models/setting\", \n  [\"ghost/mixins/validation-engine\",\"ghost/mixins/nprogress-save\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ValidationEngine = __dependency1__[\"default\"];\n    var NProgressSaveMixin = __dependency2__[\"default\"];\n\n    var Setting = DS.Model.extend(NProgressSaveMixin, ValidationEngine, {\n        validationType: 'setting',\n\n        title: DS.attr('string'),\n        description: DS.attr('string'),\n        email: DS.attr('string'),\n        logo: DS.attr('string'),\n        cover: DS.attr('string'),\n        defaultLang: DS.attr('string'),\n        postsPerPage: DS.attr('number'),\n        forceI18n: DS.attr('boolean'),\n        permalinks: DS.attr('string'),\n        activeTheme: DS.attr('string'),\n        availableThemes: DS.attr()\n    });\n\n    __exports__[\"default\"] = Setting;\n  });",
    "define(\"ghost/models/slug-generator\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SlugGenerator = Ember.Object.extend({\n        ghostPaths: null,\n        slugType: null,\n        value: null,\n        toString: function () {\n            return this.get('value');\n        },\n        generateSlug: function (textToSlugify) {\n            var self = this,\n                url;\n\n            if (!textToSlugify) {\n                return Ember.RSVP.resolve('');\n            }\n\n            url = this.get('ghostPaths.url').api('slugs', this.get('slugType'), encodeURIComponent(textToSlugify));\n\n            return ic.ajax.request(url, {\n                type: 'GET'\n            }).then(function (response) {\n                var slug = response.slugs[0].slug;\n                self.set('value', slug);\n                return slug;\n            });\n        }\n    });\n\n    __exports__[\"default\"] = SlugGenerator;\n  });",
    "define(\"ghost/models/tag\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Tag = DS.Model.extend({\n        uuid: DS.attr('string'),\n        name: DS.attr('string'),\n        slug: DS.attr('string'),\n        description: DS.attr('string'),\n        parent_id: DS.attr('number'),\n        meta_title: DS.attr('string'),\n        meta_description: DS.attr('string'),\n    });\n\n    __exports__[\"default\"] = Tag;\n  });",
    "define(\"ghost/models/user\", \n  [\"ghost/mixins/validation-engine\",\"ghost/mixins/nprogress-save\",\"ghost/mixins/selective-save\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var ValidationEngine = __dependency1__[\"default\"];\n    var NProgressSaveMixin = __dependency2__[\"default\"];\n    var SelectiveSaveMixin = __dependency3__[\"default\"];\n\n    var User = DS.Model.extend(NProgressSaveMixin, SelectiveSaveMixin, ValidationEngine, {\n        validationType: 'user',\n\n        uuid: DS.attr('string'),\n        name: DS.attr('string'),\n        slug: DS.attr('string'),\n        email: DS.attr('string'),\n        image: DS.attr('string'),\n        cover: DS.attr('string'),\n        bio: DS.attr('string'),\n        website: DS.attr('string'),\n        location: DS.attr('string'),\n        accessibility: DS.attr('string'),\n        status: DS.attr('string'),\n        language: DS.attr('string', {defaultValue: 'en_US'}),\n        meta_title: DS.attr('string'),\n        meta_description: DS.attr('string'),\n        last_login: DS.attr('moment-date'),\n        created_at: DS.attr('moment-date'),\n        created_by: DS.attr('number'),\n        updated_at: DS.attr('moment-date'),\n        updated_by: DS.attr('number'),\n        roles: DS.hasMany('role', { embedded: 'always' }),\n\n        role: Ember.computed('roles', function (name, value) {\n            if (arguments.length > 1) {\n                //Only one role per user, so remove any old data.\n                this.get('roles').clear();\n                this.get('roles').pushObject(value);\n                return value;\n            }\n            return this.get('roles.firstObject');\n        }),\n\n        // TODO: Once client-side permissions are in place,\n        // remove the hard role check.\n        isAuthor: Ember.computed.equal('role.name', 'Author'),\n        isEditor: Ember.computed.equal('role.name', 'Editor'),\n        isAdmin: Ember.computed.equal('role.name', 'Administrator'),\n        isOwner: Ember.computed.equal('role.name', 'Owner'),\n\n        saveNewPassword: function () {\n            var url = this.get('ghostPaths.url').api('users', 'password');\n            return ic.ajax.request(url, {\n                type: 'PUT',\n                data: {\n                    password: [{\n                        'oldPassword': this.get('password'),\n                        'newPassword': this.get('newPassword'),\n                        'ne2Password': this.get('ne2Password')\n                    }]\n                }\n            });\n        },\n\n        resendInvite: function () {\n            var fullUserData = this.toJSON(),\n                userData = {\n                email: fullUserData.email,\n                roles: fullUserData.roles\n            };\n\n            return ic.ajax.request(this.get('ghostPaths.url').api('users'), {\n                type: 'POST',\n                data: JSON.stringify({users: [userData]}),\n                contentType: 'application/json'\n            });\n        },\n\n        passwordValidationErrors: function () {\n            var validationErrors = [];\n\n            if (!validator.equals(this.get('newPassword'), this.get('ne2Password'))) {\n                validationErrors.push({message: 'Your new passwords do not match'});\n            }\n\n            if (!validator.isLength(this.get('newPassword'), 8)) {\n                validationErrors.push({message: 'Your password is not long enough. It must be at least 8 characters long.'});\n            }\n\n            return validationErrors;\n        }.property('password', 'newPassword', 'ne2Password'),\n\n        isPasswordValid: Ember.computed.empty('passwordValidationErrors.[]'),\n        active: function () {\n            return _.contains(['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'], this.get('status'));\n        }.property('status'),\n        invited: function () {\n            return _.contains(['invited', 'invited-pending'], this.get('status'));\n        }.property('status'),\n        pending: Ember.computed.equal('status', 'invited-pending').property('status')\n    });\n\n    __exports__[\"default\"] = User;\n  });",
    "define(\"ghost/router\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*global Ember */\n    var ghostPaths = __dependency1__[\"default\"];\n\n    // ensure we don't share routes between all Router instances\n    var Router = Ember.Router.extend();\n\n    Router.reopen({\n        location: 'trailing-history', // use HTML5 History API instead of hash-tag based URLs\n        rootURL: ghostPaths().subdir + '/ghost/', // admin interface lives under sub-directory /ghost\n\n        clearNotifications: function () {\n            this.notifications.closePassive();\n            this.notifications.displayDelayed();\n        }.on('didTransition')\n    });\n\n    Router.map(function () {\n        this.route('setup');\n        this.route('signin');\n        this.route('signout');\n        this.route('signup', { path: '/signup/:token' });\n        this.route('forgotten');\n        this.route('reset', { path: '/reset/:token' });\n        this.resource('posts', { path: '/' }, function () {\n            this.route('post', { path: ':post_id' });\n        });\n        this.resource('editor', function () {\n            this.route('new', { path: '' });\n            this.route('edit', { path: ':post_id' });\n        });\n        this.resource('settings', function () {\n            this.route('general');\n            this.resource('settings.users', { path: '/users' }, function () {\n                this.route('user', { path: '/:slug' });\n            });\n        });\n        this.route('debug');\n        //Redirect legacy content to posts\n        this.route('content');\n\n        this.route('error404', { path: '/*path' });\n\n    });\n\n    __exports__[\"default\"] = Router;\n  });",
    "define(\"ghost/routes/application\", \n  [\"ghost/mixins/shortcuts-route\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ShortcutsRoute = __dependency1__[\"default\"];\n\n    var ApplicationRoute = Ember.Route.extend(SimpleAuth.ApplicationRouteMixin, ShortcutsRoute, {\n\n        afterModel: function (model, transition) {\n            if (this.get('session').isAuthenticated) {\n                transition.send('loadServerNotifications');\n            }\n        },\n\n        shortcuts: {\n            'esc': 'closePopups'\n        },\n\n        actions: {\n            closePopups: function () {\n                this.get('popover').closePopovers();\n                this.get('notifications').closeAll();\n\n                this.send('closeModal');\n            },\n\n            signedIn: function () {\n                this.send('loadServerNotifications', true);\n            },\n\n            sessionAuthenticationFailed: function (error) {\n                if (error.errors) {\n                    this.notifications.showErrors(error.errors);\n                } else {\n                    // connection errors don't return proper status message, only req.body\n                    this.notifications.showError('There was a problem on the server.');\n                }\n            },\n\n            sessionAuthenticationSucceeded: function () {\n                var self = this;\n                this.store.find('user', 'me').then(function (user) {\n                    self.send('signedIn', user);\n                    var attemptedTransition = self.get('session').get('attemptedTransition');\n                    if (attemptedTransition) {\n                        attemptedTransition.retry();\n                        self.get('session').set('attemptedTransition', null);\n                    } else {\n                        self.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\n                    }\n                });\n            },\n\n            sessionInvalidationFailed: function (error) {\n                this.notifications.showError(error.message);\n            },\n\n            openModal: function (modalName, model, type) {\n                this.get('popover').closePopovers();\n                modalName = 'modals/' + modalName;\n                // We don't always require a modal to have a controller\n                // so we're skipping asserting if one exists\n                if (this.controllerFor(modalName, true)) {\n                    this.controllerFor(modalName).set('model', model);\n\n                    if (type) {\n                        this.controllerFor(modalName).set('imageType', type);\n                        this.controllerFor(modalName).set('src', model.get(type));\n                    }\n                }\n                return this.render(modalName, {\n                    into: 'application',\n                    outlet: 'modal'\n                });\n            },\n\n            closeModal: function () {\n                return this.disconnectOutlet({\n                    outlet: 'modal',\n                    parentView: 'application'\n                });\n            },\n\n            loadServerNotifications: function (isDelayed) {\n                var self = this;\n                if (this.session.isAuthenticated) {\n                    this.store.findAll('notification').then(function (serverNotifications) {\n                        serverNotifications.forEach(function (notification) {\n                            self.notifications.handleNotification(notification, isDelayed);\n                        });\n                    });\n                }\n            },\n\n            handleErrors: function (errors) {\n                var self = this;\n                this.notifications.clear();\n                errors.forEach(function (errorObj) {\n                    self.notifications.showError(errorObj.message || errorObj);\n\n                    if (errorObj.hasOwnProperty('el')) {\n                        errorObj.el.addClass('input-error');\n                    }\n                });\n            }\n        }\n    });\n\n    __exports__[\"default\"] = ApplicationRoute;\n  });",
    "define(\"ghost/routes/content\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ContentRoute = Ember.Route.extend({\n        beforeModel: function () {\n            this.transitionTo('posts');\n        }\n    });\n\n    __exports__[\"default\"] = ContentRoute;\n  });",
    "define(\"ghost/routes/debug\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var DebugRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, styleBody, loadingIndicator, {\n        classNames: ['settings'],\n\n        beforeModel: function () {\n            var self = this;\n            this.store.find('user', 'me').then(function (user) {\n                if (user.get('isAuthor') || user.get('isEditor')) {\n                    self.transitionTo('posts');\n                }\n            });\n        },\n\n        model: function () {\n            return this.store.find('setting', { type: 'blog,theme' }).then(function (records) {\n                return records.get('firstObject');\n            });\n        }\n\n    });\n\n    __exports__[\"default\"] = DebugRoute;\n  });",
    "define(\"ghost/routes/editor/edit\", \n  [\"ghost/mixins/editor-route-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var base = __dependency1__[\"default\"];\n\n    var EditorEditRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, base, {\n        classNames: ['editor'],\n\n        model: function (params) {\n            var self = this,\n                post,\n                postId,\n                paginationSettings;\n\n            postId = Number(params.post_id);\n\n            if (!_.isNumber(postId) || !_.isFinite(postId) || postId % 1 !== 0 || postId <= 0) {\n                return this.transitionTo('error404', 'editor/' + params.post_id);\n            }\n\n            post = this.store.getById('post', postId);\n\n            if (post) {\n                return post;\n            }\n\n            paginationSettings = {\n                id: postId,\n                status: 'all',\n                staticPages: 'all'\n            };\n\n            return this.store.find('user', 'me').then(function (user) {\n                if (user.get('isAuthor')) {\n                    paginationSettings.author = user.get('slug');\n                }\n\n                return self.store.find('post', paginationSettings).then(function (records) {\n                    var post = records.get('firstObject');\n\n                    if (user.get('isAuthor') && post.isAuthoredByUser(user)) {\n                        // do not show the post if they are an author but not this posts author\n                        post = null;\n                    }\n\n                    if (post) {\n                        return post;\n                    }\n\n                    return self.transitionTo('posts.index');\n                });\n            });\n        },\n\n        serialize: function (model) {\n            return {post_id: model.get('id')};\n        },\n\n        setupController: function (controller, model) {\n            this._super(controller, model);\n            controller.set('scratch', model.get('markdown'));\n            // used to check if anything has changed in the editor\n            controller.set('previousTagNames', model.get('tags').mapBy('name'));\n\n            // attach model-related listeners created in editor-route-base\n            this.attachModelHooks(controller, model);\n        },\n\n        actions: {\n            willTransition: function (transition) {\n                var controller = this.get('controller'),\n                    isDirty = controller.get('isDirty'),\n\n                    model = controller.get('model'),\n                    isSaving = model.get('isSaving'),\n                    isDeleted = model.get('isDeleted'),\n                    modelIsDirty = model.get('isDirty');\n\n                // when `isDeleted && isSaving`, model is in-flight, being saved\n                // to the server. when `isDeleted && !isSaving && !modelIsDirty`,\n                // the record has already been deleted and the deletion persisted.\n                //\n                // in either case  we can probably just transition now.\n                // in the former case the server will return the record, thereby updating it.\n                // @TODO: this will break if the model fails server-side validation.\n                if (!(isDeleted && isSaving) && !(isDeleted && !isSaving && !modelIsDirty) && isDirty) {\n                    transition.abort();\n                    this.send('openModal', 'leave-editor', [controller, transition]);\n                    return;\n                }\n\n                // since the transition is now certain to complete..\n                window.onbeforeunload = null;\n\n                // remove model-related listeners created in editor-route-base\n                this.detachModelHooks(controller, model);\n            }\n        }\n    });\n\n    __exports__[\"default\"] = EditorEditRoute;\n  });",
    "define(\"ghost/routes/editor/index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var EditorRoute = Ember.Route.extend({\n        beforeModel: function () {\n            this.transitionTo('editor.new');\n        }\n    });\n\n    __exports__[\"default\"] = EditorRoute;\n  });",
    "define(\"ghost/routes/editor/new\", \n  [\"ghost/mixins/editor-route-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var base = __dependency1__[\"default\"];\n\n    var EditorNewRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, base, {\n        classNames: ['editor'],\n\n        model: function () {\n            var self = this;\n            return this.get('session.user').then(function (user) {\n                return self.store.createRecord('post', {\n                    author: user\n                });\n            });\n        },\n\n        setupController: function (controller, model) {\n            this._super(controller, model);\n            controller.set('scratch', '');\n\n            // used to check if anything has changed in the editor\n            controller.set('previousTagNames', Ember.A());\n\n            // attach model-related listeners created in editor-route-base\n            this.attachModelHooks(controller, model);\n        },\n\n        actions: {\n            willTransition: function (transition) {\n                var controller = this.get('controller'),\n                    isDirty = controller.get('isDirty'),\n\n                    model = controller.get('model'),\n                    isNew = model.get('isNew'),\n                    isSaving = model.get('isSaving'),\n                    isDeleted = model.get('isDeleted'),\n                    modelIsDirty = model.get('isDirty');\n\n                // when `isDeleted && isSaving`, model is in-flight, being saved\n                // to the server. when `isDeleted && !isSaving && !modelIsDirty`,\n                // the record has already been deleted and the deletion persisted.\n                //\n                // in either case  we can probably just transition now.\n                // in the former case the server will return the record, thereby updating it.\n                // @TODO: this will break if the model fails server-side validation.\n                if (!(isDeleted && isSaving) && !(isDeleted && !isSaving && !modelIsDirty) && isDirty) {\n                    transition.abort();\n                    this.send('openModal', 'leave-editor', [controller, transition]);\n                    return;\n                }\n\n                if (isNew) {\n                    model.deleteRecord();\n                }\n\n                // since the transition is now certain to complete..\n                window.onbeforeunload = null;\n\n                // remove model-related listeners created in editor-route-base\n                this.detachModelHooks(controller, model);\n            }\n        }\n    });\n\n    __exports__[\"default\"] = EditorNewRoute;\n  });",
    "define(\"ghost/routes/error404\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Error404Route = Ember.Route.extend({\n        controllerName: 'error',\n        templateName: 'error',\n\n        model: function () {\n            return {\n                status: 404\n            };\n        }\n    });\n\n    __exports__[\"default\"] = Error404Route;\n  });",
    "define(\"ghost/routes/forgotten\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var ForgottenRoute = Ember.Route.extend(styleBody, loadingIndicator, {\n        classNames: ['ghost-forgotten']\n    });\n\n    __exports__[\"default\"] = ForgottenRoute;\n  });",
    "define(\"ghost/routes/posts\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/shortcuts-route\",\"ghost/mixins/loading-indicator\",\"ghost/mixins/pagination-route\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var ShortcutsRoute = __dependency2__[\"default\"];\n    var loadingIndicator = __dependency3__[\"default\"];\n    var PaginationRouteMixin = __dependency4__[\"default\"];\n\n    var paginationSettings = {\n        status: 'all',\n        staticPages: 'all',\n        page: 1\n    };\n\n    var PostsRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, ShortcutsRoute, styleBody, loadingIndicator, PaginationRouteMixin, {\n        classNames: ['manage'],\n\n        model: function () {\n            var self = this;\n\n            return this.store.find('user', 'me').then(function (user) {\n                if (user.get('isAuthor')) {\n                    paginationSettings.author = user.get('slug');\n                }\n                // using `.filter` allows the template to auto-update when new models are pulled in from the server.\n                // we just need to 'return true' to allow all models by default.\n                return self.store.filter('post', paginationSettings, function (post) {\n                    if (user.get('isAuthor')) {\n                        return post.isAuthoredByUser(user);\n                    }\n\n                    return true;\n                });\n            });\n        },\n\n        setupController: function (controller, model) {\n            this._super(controller, model);\n            this.setupPagination(paginationSettings);\n        },\n\n        stepThroughPosts: function (step) {\n            var currentPost = this.get('controller.currentPost'),\n                posts = this.get('controller.arrangedContent'),\n                length = posts.get('length'),\n                newPosition;\n\n            newPosition = posts.indexOf(currentPost) + step;\n\n            // if we are on the first or last item\n            // just do nothing (desired behavior is to not\n            // loop around)\n            if (newPosition >= length) {\n                return;\n            } else if (newPosition < 0) {\n                return;\n            }\n            this.transitionTo('posts.post', posts.objectAt(newPosition));\n        },\n\n        shortcuts: {\n            'up': 'moveUp',\n            'down': 'moveDown'\n        },\n        actions: {\n            openEditor: function (post) {\n                this.transitionTo('editor.edit', post);\n            },\n            moveUp: function () {\n                this.stepThroughPosts(-1);\n            },\n            moveDown: function () {\n                this.stepThroughPosts(1);\n            }\n        }\n    });\n\n    __exports__[\"default\"] = PostsRoute;\n  });",
    "define(\"ghost/routes/posts/index\", \n  [\"ghost/mixins/loading-indicator\",\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var loadingIndicator = __dependency1__[\"default\"];\n    var mobileQuery = __dependency2__.mobileQuery;\n\n    var PostsIndexRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, loadingIndicator, {\n        // This route's only function is to determine whether or not a post\n        // exists to be used for the content preview.  It has a parent resource (Posts)\n        // that is responsible for populating the store.\n        beforeModel: function () {\n            var self = this,\n            // the store has been populated so we can work with the local copy\n                posts = this.store.all('post'),\n                currentPost = this.controllerFor('posts').get('currentPost');\n\n            return this.store.find('user', 'me').then(function (user) {\n                // return the first post find that matches the following criteria:\n                // * User is an author, and is the author of this post\n                // * User has a role other than author\n                return posts.find(function (post) {\n                    if (user.get('isAuthor')) {\n                        return post.isAuthoredByUser(user);\n                    } else {\n                        return true;\n                    }\n                });\n            })\n            .then(function (post) {\n                if (post) {\n                    if (currentPost === post && mobileQuery.matches) {\n                        self.controllerFor('posts').send('hideContentPreview');\n                    }\n\n                    return self.transitionTo('posts.post', post);\n                }\n            });\n        }\n    });\n\n    __exports__[\"default\"] = PostsIndexRoute;\n  });",
    "define(\"ghost/routes/posts/post\", \n  [\"ghost/mixins/loading-indicator\",\"ghost/mixins/shortcuts-route\",\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var loadingIndicator = __dependency1__[\"default\"];\n    var ShortcutsRoute = __dependency2__[\"default\"];\n    var mobileQuery = __dependency3__.mobileQuery;\n\n    var PostsPostRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, loadingIndicator, ShortcutsRoute, {\n        model: function (params) {\n            var self = this,\n                post,\n                postId,\n                paginationSettings;\n\n            postId = Number(params.post_id);\n\n            if (!_.isNumber(postId) || !_.isFinite(postId) || postId % 1 !== 0 || postId <= 0)\n            {\n                return this.transitionTo('error404', params.post_id);\n            }\n\n            post = this.store.getById('post', postId);\n\n            if (post) {\n                return post;\n            }\n\n            paginationSettings = {\n                id: postId,\n                status: 'all',\n                staticPages: 'all'\n            };\n\n            return this.store.find('user', 'me').then(function (user) {\n                if (user.get('isAuthor')) {\n                    paginationSettings.author = user.get('slug');\n                }\n\n                return self.store.find('post', paginationSettings).then(function (records) {\n                    var post = records.get('firstObject');\n\n                    if (user.get('isAuthor') && !post.isAuthoredByUser(user)) {\n                        // do not show the post if they are an author but not this posts author\n                        post = null;\n                    }\n\n                    if (post) {\n                        return post;\n                    }\n\n                    return self.transitionTo('posts.index');\n                });\n            });\n        },\n        setupController: function (controller, model) {\n            this._super(controller, model);\n\n            this.controllerFor('posts').set('currentPost', model);\n\n            if (mobileQuery.matches) {\n                this.controllerFor('posts').send('hideContentPreview');\n            }\n        },\n\n        shortcuts: {\n            'enter': 'openEditor'\n        },\n        actions: {\n            openEditor: function () {\n                this.transitionTo('editor.edit', this.get('controller.model'));\n            }\n        }\n    });\n\n    __exports__[\"default\"] = PostsPostRoute;\n  });",
    "define(\"ghost/routes/reset\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var ResetRoute = Ember.Route.extend(styleBody, loadingIndicator, {\n        classNames: ['ghost-reset'],\n        beforeModel: function () {\n            if (this.get('session').isAuthenticated) {\n                this.notifications.showWarn('You can\\'t reset your password while you\\'re signed in.', { delayed: true });\n                this.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\n            }\n        },\n        setupController: function (controller, params) {\n            controller.token = params.token;\n        }\n    });\n\n    __exports__[\"default\"] = ResetRoute;\n  });",
    "define(\"ghost/routes/settings\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var SettingsRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, styleBody, loadingIndicator, {\n        classNames: ['settings']\n    });\n\n    __exports__[\"default\"] = SettingsRoute;\n  });",
    "define(\"ghost/routes/settings/apps\", \n  [\"ghost/mixins/current-user-settings\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var CurrentUserSettings = __dependency1__[\"default\"];\n\n    var AppsRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, CurrentUserSettings, {\n        beforeModel: function () {\n            if (!this.get('config.apps')) {\n                return this.transitionTo('settings.general');\n            }\n\n            return this.currentUser()\n                .then(this.transitionAuthor())\n                .then(this.transitionEditor());\n        },\n        \n        model: function () {\n            return this.store.find('app');\n        }\n    });\n\n    __exports__[\"default\"] = AppsRoute;\n  });",
    "define(\"ghost/routes/settings/general\", \n  [\"ghost/mixins/loading-indicator\",\"ghost/mixins/current-user-settings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var loadingIndicator = __dependency1__[\"default\"];\n    var CurrentUserSettings = __dependency2__[\"default\"];\n\n    var SettingsGeneralRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, loadingIndicator, CurrentUserSettings, {\n        beforeModel: function () {\n            return this.currentUser()\n                .then(this.transitionAuthor())\n                .then(this.transitionEditor());\n        },\n\n        model: function () {\n            return this.store.find('setting', { type: 'blog,theme' }).then(function (records) {\n                return records.get('firstObject');\n            });\n        }\n    });\n\n    __exports__[\"default\"] = SettingsGeneralRoute;\n  });",
    "define(\"ghost/routes/settings/index\", \n  [\"ghost/utils/mobile\",\"ghost/mixins/current-user-settings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var mobileQuery = __dependency1__.mobileQuery;\n    var CurrentUserSettings = __dependency2__[\"default\"];\n\n    var SettingsIndexRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, CurrentUserSettings, {\n        // redirect to general tab, unless on a mobile phone\n        beforeModel: function () {\n            var self = this;\n            this.currentUser()\n                .then(this.transitionAuthor())\n                .then(this.transitionEditor())\n                .then(function () {\n                    if (!mobileQuery.matches) {\n                        self.transitionTo('settings.general');\n                    } else {\n                        //fill the empty {{outlet}} in settings.hbs if the user\n                        //goes to fullscreen\n\n                        //fillOutlet needs special treatment so that it is\n                        //properly bound to this when called from a MQ event\n                        self.set('fillOutlet', _.bind(function fillOutlet(mq) {\n                            if (!mq.matches) {\n                                self.transitionTo('settings.general');\n                            }\n                        }, self));\n                        mobileQuery.addListener(self.fillOutlet);\n                    }\n                });\n        },\n        \n        deactivate: function () {\n            if (this.get('fillOutlet')) {\n                mobileQuery.removeListener(this.fillOutlet);\n            }\n        }\n    });\n\n    __exports__[\"default\"] = SettingsIndexRoute;\n  });",
    "define(\"ghost/routes/settings/users\", \n  [\"ghost/mixins/current-user-settings\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var CurrentUserSettings = __dependency1__[\"default\"];\n\n    var UsersRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, CurrentUserSettings, {\n        beforeModel: function () {\n            return this.currentUser()\n                .then(this.transitionAuthor());\n        }\n    });\n\n    __exports__[\"default\"] = UsersRoute;\n  });",
    "define(\"ghost/routes/settings/users/index\", \n  [\"ghost/mixins/pagination-route\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PaginationRouteMixin = __dependency1__[\"default\"];\n\n    var paginationSettings = {\n        page: 1,\n        limit: 20,\n        status: 'all'\n    };\n\n    var UsersIndexRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, PaginationRouteMixin, {\n        setupController: function (controller, model) {\n            this._super(controller, model);\n            this.setupPagination(paginationSettings);\n        },\n\n        model: function () {\n            var self = this;\n            return this.store.find('user', 'me').then(function (currentUser) {\n                if (currentUser.get('isEditor')) {\n                    // Editors only see authors in the list\n                    paginationSettings.role = 'Author';\n                }\n                return self.store.filter('user', paginationSettings, function (user) {\n                    if (currentUser.get('isEditor')) {\n                        return user.get('isAuthor');\n                    }\n                    return true;\n                });\n            });\n        },\n\n        actions: {\n            reload: function () {\n                this.refresh();\n            }\n        }\n    });\n\n    __exports__[\"default\"] = UsersIndexRoute;\n  });",
    "define(\"ghost/routes/settings/users/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingsUserRoute = Ember.Route.extend({\n        model: function (params) {\n            var self = this;\n            // TODO: Make custom user adapter that uses /api/users/:slug endpoint\n            // return this.store.find('user', { slug: params.slug });\n\n            // Instead, get all the users and then find by slug\n            return this.store.find('user').then(function (result) {\n                var user = result.findBy('slug', params.slug);\n\n                if (!user) {\n                    return self.transitionTo('error404', 'settings/users/' + params.slug);\n                }\n\n                return user;\n            });\n        },\n\n        afterModel: function (user) {\n            var self = this;\n            this.store.find('user', 'me').then(function (currentUser) {\n                var isOwnProfile = user.get('id') === currentUser.get('id'),\n                    isAuthor = currentUser.get('isAuthor'),\n                    isEditor = currentUser.get('isEditor');\n                if (isAuthor && !isOwnProfile) {\n                    self.transitionTo('settings.users.user', currentUser);\n                } else if (isEditor && !isOwnProfile && !user.get('isAuthor')) {\n                    self.transitionTo('settings.users');\n                }\n            });\n        },\n\n        deactivate: function () {\n            var model = this.modelFor('settings.users.user');\n\n            // we want to revert any unsaved changes on exit\n            if (model && model.get('isDirty')) {\n                model.rollback();\n            }\n\n            this._super();\n        }\n    });\n\n    __exports__[\"default\"] = SettingsUserRoute;\n  });",
    "define(\"ghost/routes/setup\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var SetupRoute = Ember.Route.extend(styleBody, loadingIndicator, {\n        classNames: ['ghost-setup'],\n\n        // use the beforeModel hook to check to see whether or not setup has been\n        // previously completed.  If it has, stop the transition into the setup page.\n\n        beforeModel: function () {\n            var self = this;\n\n            // If user is logged in, setup has already been completed.\n            if (this.get('session').isAuthenticated) {\n                this.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\n                return;\n            }\n\n            // If user is not logged in, check the state of the setup process via the API\n            return ic.ajax.request(this.get('ghostPaths.url').api('authentication/setup'), {\n                type: 'GET'\n            }).then(function (result) {\n                var setup = result.setup[0].status;\n\n                if (setup) {\n                    return self.transitionTo('signin');\n                }\n            });\n        }\n    });\n\n    __exports__[\"default\"] = SetupRoute;\n  });",
    "define(\"ghost/routes/signin\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var SigninRoute = Ember.Route.extend(styleBody, loadingIndicator, {\n        classNames: ['ghost-login'],\n        beforeModel: function () {\n            if (this.get('session').isAuthenticated) {\n                this.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\n            }\n        },\n\n        // the deactivate hook is called after a route has been exited.\n        deactivate: function () {\n            this._super();\n\n            // clear the properties that hold the credentials from the controller\n            // when we're no longer on the signin screen\n            this.controllerFor('signin').setProperties({ identification: '', password: '' });\n        }\n    });\n\n    __exports__[\"default\"] = SigninRoute;\n  });",
    "define(\"ghost/routes/signout\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var SignoutRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, styleBody, loadingIndicator, {\n        classNames: ['ghost-signout'],\n\n        afterModel: function (model, transition) {\n            this.notifications.clear();\n            if (Ember.canInvoke(transition, 'send')) {\n                transition.send('invalidateSession');\n                transition.abort();\n            } else {\n                this.send('invalidateSession');\n            }\n        },\n    });\n\n    __exports__[\"default\"] = SignoutRoute;\n  });",
    "define(\"ghost/routes/signup\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var SignupRoute = Ember.Route.extend(styleBody, loadingIndicator, {\n        classNames: ['ghost-signup'],\n        beforeModel: function () {\n            if (this.get('session').isAuthenticated) {\n                this.notifications.showWarn('You need to sign out to register as a new user.', { delayed: true });\n                this.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\n            }\n        },\n        setupController: function (controller, params) {\n            var tokenText,\n                email,\n                re = /^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/;\n            if (re.test(params.token)) {\n                try {\n                    tokenText = atob(params.token);\n                    email = tokenText.split('|')[1];\n                    controller.token = params.token;\n                    controller.email = email;\n                } catch (e) {\n                    this.transitionTo('signin');\n                    this.notifications.showError('Invalid token.', {delayed: true});\n                }\n            } else {\n                this.transitionTo('signin');\n                this.notifications.showError('Invalid token.', {delayed: true});\n            }\n        }\n    });\n\n    __exports__[\"default\"] = SignupRoute;\n  });",
    "define(\"ghost/serializers/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ApplicationSerializer = DS.RESTSerializer.extend({\n        serializeIntoHash: function (hash, type, record, options) {\n            // Our API expects an id on the posted object\n            options = options || {};\n            options.includeId = true;\n\n            // We have a plural root in the API\n            var root = Ember.String.pluralize(type.typeKey),\n                data = this.serialize(record, options);\n\n            // Don't ever pass uuid's\n            delete data.uuid;\n\n            hash[root] = [data];\n        }\n    });\n\n    __exports__[\"default\"] = ApplicationSerializer;\n  });",
    "define(\"ghost/serializers/post\", \n  [\"ghost/serializers/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n\n    var PostSerializer = ApplicationSerializer.extend(DS.EmbeddedRecordsMixin, {\n        // settings for the EmbeddedRecordsMixin.\n        attrs: {\n            tags: { embedded: 'always' }\n        },\n\n        normalize: function (type, hash) {\n            // this is to enable us to still access the raw author_id\n            // without requiring an extra get request (since it is an\n            // async relationship).\n            hash.author_id = hash.author;\n\n            return this._super(type, hash);\n        },\n\n        extractSingle: function (store, primaryType, payload) {\n            var root = this.keyForAttribute(primaryType.typeKey),\n                pluralizedRoot = Ember.String.pluralize(primaryType.typeKey);\n\n            // make payload { post: { title: '', tags: [obj, obj], etc. } }.\n            // this allows ember-data to pull the embedded tags out again,\n            // in the function `updatePayloadWithEmbeddedHasMany` of the\n            // EmbeddedRecordsMixin (line: `if (!partial[attribute])`):\n            // https://github.com/emberjs/data/blob/master/packages/activemodel-adapter/lib/system/embedded_records_mixin.js#L499\n            payload[root] = payload[pluralizedRoot][0];\n            delete payload[pluralizedRoot];\n\n            return this._super.apply(this, arguments);\n        },\n\n        keyForAttribute: function (attr) {\n            return attr;\n        },\n\n        keyForRelationship: function (relationshipName) {\n            // this is a hack to prevent Ember-Data from deleting our `tags` reference.\n            // ref: https://github.com/emberjs/data/issues/2051\n            // @TODO: remove this once the situation becomes clearer what to do.\n            if (relationshipName === 'tags') {\n                return 'tag';\n            }\n\n            return relationshipName;\n        },\n\n        serializeIntoHash: function (hash, type, record, options) {\n            options = options || {};\n\n            // We have a plural root in the API\n            var root = Ember.String.pluralize(type.typeKey),\n                data = this.serialize(record, options);\n\n            // Don't ever pass uuid's\n            delete data.uuid;\n\n            hash[root] = [data];\n        }\n    });\n\n    __exports__[\"default\"] = PostSerializer;\n  });",
    "define(\"ghost/serializers/setting\", \n  [\"ghost/serializers/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n\n    var SettingSerializer = ApplicationSerializer.extend({\n        serializeIntoHash: function (hash, type, record, options) {\n            // Settings API does not want ids\n            options = options || {};\n            options.includeId = false;\n\n            var root = Ember.String.pluralize(type.typeKey),\n                data = this.serialize(record, options),\n                payload = [];\n\n            delete data.id;\n\n            Object.keys(data).forEach(function (k) {\n                payload.push({ key: k, value: data[k] });\n            });\n\n            hash[root] = payload;\n        },\n\n        extractArray: function (store, type, _payload) {\n            var payload = { id: '0' };\n\n            _payload.settings.forEach(function (setting) {\n                payload[setting.key] = setting.value;\n            });\n\n            return [payload];\n        },\n\n        extractSingle: function (store, type, payload) {\n            return this.extractArray(store, type, payload).pop();\n        }\n    });\n\n    __exports__[\"default\"] = SettingSerializer;\n  });",
    "define(\"ghost/serializers/user\", \n  [\"ghost/serializers/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n\n    var UserSerializer = ApplicationSerializer.extend(DS.EmbeddedRecordsMixin, {\n        attrs: {\n            roles: { embedded: 'always' }\n        },\n\n        extractSingle: function (store, primaryType, payload) {\n            var root = this.keyForAttribute(primaryType.typeKey),\n                pluralizedRoot = Ember.String.pluralize(primaryType.typeKey);\n\n            payload[root] = payload[pluralizedRoot][0];\n            delete payload[pluralizedRoot];\n\n            return this._super.apply(this, arguments);\n        },\n\n        keyForAttribute: function (attr) {\n            return attr;\n        },\n\n        keyForRelationship: function (relationshipName) {\n            // this is a hack to prevent Ember-Data from deleting our `tags` reference.\n            // ref: https://github.com/emberjs/data/issues/2051\n            // @TODO: remove this once the situation becomes clearer what to do.\n            if (relationshipName === 'roles') {\n                return 'role';\n            }\n\n            return relationshipName;\n        }\n    });\n\n    __exports__[\"default\"] = UserSerializer;\n  });",
    "define(\"ghost/transforms/moment-date\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global moment */\n    var MomentDate = DS.Transform.extend({\n        deserialize: function (serialized) {\n            if (serialized) {\n                return moment(serialized);\n            }\n            return serialized;\n        },\n        serialize: function (deserialized) {\n            if (deserialized) {\n                return moment(deserialized).toDate();\n            }\n            return deserialized;\n        }\n    });\n    __exports__[\"default\"] = MomentDate;\n  });",
    "define(\"ghost/utils/ajax\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global ic */\n\n    var ajax = window.ajax = function () {\n        return ic.ajax.request.apply(null, arguments);\n    };\n\n    // Used in API request fail handlers to parse a standard api error\n    // response json for the message to display\n    var getRequestErrorMessage = function (request, performConcat) {\n        var message,\n            msgDetail;\n\n        // Can't really continue without a request\n        if (!request) {\n            return null;\n        }\n\n        // Seems like a sensible default\n        message = request.statusText;\n\n        // If a non 200 response\n        if (request.status !== 200) {\n            try {\n                // Try to parse out the error, or default to 'Unknown'\n                if (request.responseJSON.errors && Ember.isArray(request.responseJSON.errors)) {\n\n                    message = request.responseJSON.errors.map(function (errorItem) {\n                        return errorItem.message;\n                    });\n                } else {\n                    message =  request.responseJSON.error || 'Unknown Error';\n                }\n            } catch (e) {\n                msgDetail = request.status ? request.status + ' - ' + request.statusText : 'Server was not available';\n                message = 'The server returned an error (' + msgDetail + ').';\n            }\n        }\n\n        if (performConcat && Ember.isArray(message)) {\n            message = message.join('<br />');\n        }\n\n        // return an array of errors by default\n        if (!performConcat && typeof message === 'string') {\n            message = [message];\n        }\n\n        return message;\n    };\n\n    __exports__.getRequestErrorMessage = getRequestErrorMessage;\n    __exports__.ajax = ajax;\n    __exports__[\"default\"] = ajax;\n  });",
    "define(\"ghost/utils/bound-one-way\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n     * Defines a property similarly to `Ember.computed.oneway`,\n     * save that while a `oneway` loses its binding upon being set,\n     * the `BoundOneWay` will continue to listen for upstream changes.\n     *\n     * This is an ideal tool for working with values inside of {{input}}\n     * elements.\n     * @param transform: a function to transform the **upstream** value.\n     */\n    var BoundOneWay = function (upstream, transform) {\n        if (typeof transform !== 'function') {\n            //default to the identity function\n            transform = function (value) { return value; };\n        }\n        return function (key, value) {\n            return arguments.length > 1 ? value : transform(this.get(upstream));\n        }.property(upstream);\n    };\n\n    __exports__[\"default\"] = BoundOneWay;\n  });",
    "define(\"ghost/utils/caja-sanitizers\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n     * google-caja uses url() and id() to verify if the values are allowed.\n     */\n    var url,\n        id;\n\n    /**\n     * Check if URL is allowed\n     * URLs are allowed if they start with http://, https://, or /.\n     */\n    var url = function (url) {\n    \turl = url.toString().replace(/['\"]+/g, '');\n        if (/^https?:\\/\\//.test(url) || /^\\//.test(url)) {\n            return url;\n        }\n    };\n\n    /**\n     * Check if ID is allowed\n     * All ids are allowed at the moment.\n     */\n    var id = function (id) {\n        return id;\n    };\n\n    __exports__[\"default\"] = {\n        url: url,\n        id: id\n    };\n  });",
    "define(\"ghost/utils/codemirror-mobile\", \n  [\"ghost/assets/lib/touch-editor\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*global CodeMirror, device, FastClick*/\n    var createTouchEditor = __dependency1__[\"default\"];\n\n    var setupMobileCodeMirror,\n        TouchEditor,\n        init;\n\n    setupMobileCodeMirror = function setupMobileCodeMirror() {\n        var noop = function () {},\n            key;\n\n        for (key in CodeMirror) {\n            if (CodeMirror.hasOwnProperty(key)) {\n                CodeMirror[key] = noop;\n            }\n        }\n\n        CodeMirror.fromTextArea = function (el, options) {\n            return new TouchEditor(el, options);\n        };\n\n        CodeMirror.keyMap = { basic: {} };\n    };\n\n    init = function init() {\n        //Codemirror does not function on mobile devices,\n        // nor on any iDevice.\n        if (device.mobile() || (device.tablet() && device.ios())) {\n            $('body').addClass('touch-editor');\n\n            // make editor tabs touch-to-toggle in portrait mode\n            $('#entry-markdown-header').on('tap', function () {\n                $('.entry-markdown').addClass('active');\n                $('.entry-preview').removeClass('active');\n            });\n\n            $('#entry-preview-header').on('tap', function () {\n                $('.entry-markdown').removeClass('active');\n                $('.entry-preview').addClass('active');\n            });\n\n\n            Ember.touchEditor = true;\n            //initialize FastClick to remove touch delays\n            Ember.run.scheduleOnce('afterRender', null, function () {\n                FastClick.attach(document.body);\n            });\n            TouchEditor = createTouchEditor();\n            setupMobileCodeMirror();\n        }\n    };\n\n    __exports__[\"default\"] = {\n        createIfMobile: init\n    };\n  });",
    "define(\"ghost/utils/codemirror-shortcuts\", \n  [\"ghost/utils/titleize\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global CodeMirror, moment */\n    /** Set up a shortcut function to be called via router actions.\n     *  See editor-route-base\n     */\n\n    var titleize = __dependency1__[\"default\"];\n\n    function init() {\n        //Used for simple, noncomputational replace-and-go! shortcuts.\n        //  See default case in shortcut function below.\n        CodeMirror.prototype.simpleShortcutSyntax = {\n            bold: '**$1**',\n            italic: '*$1*',\n            strike: '~~$1~~',\n            code: '`$1`',\n            link: '[$1](http://)',\n            image: '![$1](http://)',\n            blockquote: '> $1'\n        };\n        CodeMirror.prototype.shortcut = function (type) {\n            var text = this.getSelection(),\n                cursor = this.getCursor(),\n                line = this.getLine(cursor.line),\n                fromLineStart = {line: cursor.line, ch: 0},\n                toLineEnd = {line: cursor.line, ch: line.length},\n                md, letterCount, textIndex, position;\n            switch (type) {\n            case 'h1':\n                line = line.replace(/^#* /, '');\n                this.replaceRange('# ' + line, fromLineStart, toLineEnd);\n                this.setCursor(cursor.line, cursor.ch + 2);\n                return;\n            case 'h2':\n                line = line.replace(/^#* /, '');\n                this.replaceRange('## ' + line, fromLineStart, toLineEnd);\n                this.setCursor(cursor.line, cursor.ch + 3);\n                return;\n            case 'h3':\n                line = line.replace(/^#* /, '');\n                this.replaceRange('### ' + line, fromLineStart, toLineEnd);\n                this.setCursor(cursor.line, cursor.ch + 4);\n                return;\n            case 'h4':\n                line = line.replace(/^#* /, '');\n                this.replaceRange('#### ' + line, fromLineStart, toLineEnd);\n                this.setCursor(cursor.line, cursor.ch + 5);\n                return;\n            case 'h5':\n                line = line.replace(/^#* /, '');\n                this.replaceRange('##### ' + line, fromLineStart, toLineEnd);\n                this.setCursor(cursor.line, cursor.ch + 6);\n                return;\n            case 'h6':\n                line = line.replace(/^#* /, '');\n                this.replaceRange('###### ' + line, fromLineStart, toLineEnd);\n                this.setCursor(cursor.line, cursor.ch + 7);\n                return;\n            case 'link':\n                md = this.simpleShortcutSyntax.link.replace('$1', text);\n                this.replaceSelection(md, 'end');\n                if (!text) {\n                    this.setCursor(cursor.line, cursor.ch + 1);\n                } else {\n                    textIndex = line.indexOf(text, cursor.ch - text.length);\n                    position = textIndex + md.length - 1;\n                    this.setSelection({\n                        line: cursor.line,\n                        ch: position - 7\n                    }, {\n                        line: cursor.line,\n                        ch: position\n                    });\n                }\n                return;\n            case 'image':\n                md = this.simpleShortcutSyntax.image.replace('$1', text);\n                if (line !== '') {\n                    md = '\\n\\n' + md;\n                }\n                this.replaceSelection(md, 'end');\n                cursor = this.getCursor();\n                this.setSelection({line: cursor.line, ch: cursor.ch - 8}, {line: cursor.line, ch: cursor.ch - 1});\n                return;\n            case 'list':\n                md = text.replace(/^(\\s*)(\\w\\W*)/gm, '$1* $2');\n                this.replaceSelection(md, 'end');\n                return;\n            case 'currentDate':\n                md = moment(new Date()).format('D MMMM YYYY');\n                this.replaceSelection(md, 'end');\n                return;\n            case 'uppercase':\n                md = text.toLocaleUpperCase();\n                break;\n            case 'lowercase':\n                md = text.toLocaleLowerCase();\n                break;\n            case 'titlecase':\n                md = titleize(text);\n                break;\n            /** @TODO\n            case 'copyHTML':\n                converter = new Showdown.converter();\n                if (text) {\n                    md = converter.makeHtml(text);\n                } else {\n                    md = converter.makeHtml(this.getValue());\n                }\n\n                $(\".modal-copyToHTML-content\").text(md).selectText();\n                break;\n            */\n            default:\n                if (this.simpleShortcutSyntax[type]) {\n                    md = this.simpleShortcutSyntax[type].replace('$1', text);\n                }\n            }\n            if (md) {\n                this.replaceSelection(md, 'end');\n                if (!text) {\n                    letterCount = md.length;\n                    this.setCursor({\n                        line: cursor.line,\n                        ch: cursor.ch + (letterCount / 2)\n                    });\n                }\n            }\n        };\n    }\n\n    __exports__[\"default\"] = {\n        init: init\n    };\n  });",
    "define(\"ghost/utils/date-formatting\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global moment */\n    var parseDateFormats = ['DD MMM YY @ HH:mm', 'DD MMM YY HH:mm',\n                            'DD MMM YYYY @ HH:mm', 'DD MMM YYYY HH:mm',\n                            'DD/MM/YY @ HH:mm', 'DD/MM/YY HH:mm',\n                            'DD/MM/YYYY @ HH:mm', 'DD/MM/YYYY HH:mm',\n                            'DD-MM-YY @ HH:mm', 'DD-MM-YY HH:mm',\n                            'DD-MM-YYYY @ HH:mm', 'DD-MM-YYYY HH:mm',\n                            'YYYY-MM-DD @ HH:mm', 'YYYY-MM-DD HH:mm',\n                            'DD MMM @ HH:mm', 'DD MMM HH:mm'],\n        displayDateFormat = 'DD MMM YY @ HH:mm';\n\n    /**\n     * Add missing timestamps\n     */\n    var verifyTimeStamp = function (dateString) {\n        if (dateString && !dateString.slice(-5).match(/\\d+:\\d\\d/)) {\n            dateString += ' 12:00';\n        }\n        return dateString;\n    };\n\n    //Parses a string to a Moment\n    var parseDateString = function (value) {\n        return value ? moment(verifyTimeStamp(value), parseDateFormats, true) : undefined;\n    };\n\n    //Formats a Date or Moment\n    var formatDate = function (value) {\n        return verifyTimeStamp(value ? moment(value).format(displayDateFormat) : '');\n    };\n\n    __exports__.parseDateString = parseDateString;\n    __exports__.formatDate = formatDate;\n  });",
    "define(\"ghost/utils/editor-shortcuts\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var shortcuts = {},\n        ctrlOrCmd = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';\n    //\n    //General editor shortcuts\n    //\n\n    shortcuts[ctrlOrCmd + '+s'] = 'save';\n    shortcuts[ctrlOrCmd + '+alt+p'] = 'publish';\n    shortcuts['alt+shift+z'] = 'toggleZenMode';\n\n    //\n    //CodeMirror Markdown Shortcuts\n    //\n\n    //Text\n    shortcuts['ctrl+alt+u'] = {action: 'codeMirrorShortcut', options: {type: 'strike'}};\n    shortcuts[ctrlOrCmd + '+b'] = {action: 'codeMirrorShortcut', options: {type: 'bold'}};\n    shortcuts[ctrlOrCmd + '+i'] = {action: 'codeMirrorShortcut', options: {type: 'italic'}};\n\n    shortcuts['ctrl+U'] = {action: 'codeMirrorShortcut', options: {type: 'uppercase'}};\n    shortcuts['ctrl+shift+U'] = {action: 'codeMirrorShortcut', options: {type: 'lowercase'}};\n    shortcuts['ctrl+alt+shift+U'] = {action: 'codeMirrorShortcut', options: {type: 'titlecase'}};\n\n    //Headings\n    shortcuts['ctrl+alt+1'] = {action: 'codeMirrorShortcut', options: {type: 'h1'}};\n    shortcuts['ctrl+alt+2'] = {action: 'codeMirrorShortcut', options: {type: 'h2'}};\n    shortcuts['ctrl+alt+3'] = {action: 'codeMirrorShortcut', options: {type: 'h3'}};\n    shortcuts['ctrl+alt+4'] = {action: 'codeMirrorShortcut', options: {type: 'h4'}};\n    shortcuts['ctrl+alt+5'] = {action: 'codeMirrorShortcut', options: {type: 'h5'}};\n    shortcuts['ctrl+alt+6'] = {action: 'codeMirrorShortcut', options: {type: 'h6'}};\n\n    //Formatting\n    shortcuts['ctrl+q'] = {action: 'codeMirrorShortcut', options: {type: 'blockquote'}};\n    shortcuts['ctrl+l'] = {action: 'codeMirrorShortcut', options: {type: 'list'}};\n\n    //Insert content\n    shortcuts['ctrl+shift+1'] = {action: 'codeMirrorShortcut', options: {type: 'currentDate'}};\n    shortcuts[ctrlOrCmd + '+k'] = {action: 'codeMirrorShortcut', options: {type: 'link'}};\n    shortcuts[ctrlOrCmd + '+shift+i'] = {action: 'codeMirrorShortcut', options: {type: 'image'}};\n    shortcuts[ctrlOrCmd + '+shift+k'] = {action: 'codeMirrorShortcut', options: {type: 'code'}};\n\n    //Currently broken CodeMirror Markdown shortcuts.\n    // Some may be broken due to a conflict with CodeMirror commands.\n    // (see http://codemirror.net/doc/manual.html#commands)\n    //\n    //shortcuts[ctrlOrCmd + '+c'] = {action: 'codeMirrorShortcut', options: {type: 'copyHTML'}};\n\n    __exports__[\"default\"] = shortcuts;\n  });",
    "define(\"ghost/utils/ghost-paths\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var makeRoute = function (root, args) {\n        var parts = Array.prototype.slice.call(args, 0).join('/'),\n            route = [root, parts].join('/');\n\n        if (route.slice(-1) !== '/') {\n            route += '/';\n        }\n\n        return route;\n    };\n\n\n    function ghostPaths() {\n        var path = window.location.pathname,\n            subdir = path.substr(0, path.search('/ghost/')),\n            adminRoot = subdir + '/ghost',\n            apiRoot = subdir + '/ghost/api/v0.1';\n\n        function assetUrl(src) {\n            return subdir + src;\n        }\n\n        return {\n            subdir: subdir,\n            blogRoot: subdir + '/',\n            adminRoot: adminRoot,\n            apiRoot: apiRoot,\n            userImage: assetUrl('/assets/img/user-image.png'),\n            errorImageSrc: assetUrl('/ghost/img/404-ghost@2x.png'),\n            errorImageSrcSet: assetUrl('/ghost/img/404-ghost.png') + ' 1x, ' +\n                assetUrl('/ghost/img/404-ghost@2x.png') + ' 2x',\n\n            url: {\n                admin: function () {\n                    return makeRoute(adminRoot, arguments);\n                },\n\n                api: function () {\n                    return makeRoute(apiRoot, arguments);\n                },\n\n                asset: assetUrl\n            }\n        };\n    }\n\n    __exports__[\"default\"] = ghostPaths;\n  });",
    "define(\"ghost/utils/link-view\", \n  [],\n  function() {\n    \"use strict\";\n    Ember.LinkView.reopen({\n        active: Ember.computed('resolvedParams', 'routeArgs', function () {\n            var isActive = this._super();\n\n            Ember.set(this, 'alternateActive', isActive);\n\n            return isActive;\n        })\n    });\n  });",
    "define(\"ghost/utils/mobile\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var mobileQuery = matchMedia('(max-width: 800px)'),\n\n        responsiveAction = function responsiveAction(event, mediaCondition, cb) {\n            if (!window.matchMedia(mediaCondition).matches) {\n                return;\n            }\n\n            event.preventDefault();\n            event.stopPropagation();\n            cb();\n        };\n\n    __exports__.mobileQuery = mobileQuery;\n    __exports__.responsiveAction = responsiveAction;\n    __exports__[\"default\"] = {\n        mobileQuery: mobileQuery,\n        responsiveAction: responsiveAction\n    };\n  });",
    "define(\"ghost/utils/notifications\", \n  [\"ghost/models/notification\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Notification = __dependency1__[\"default\"];\n\n    var Notifications = Ember.ArrayProxy.extend({\n        delayedNotifications: [],\n        content: Ember.A(),\n        timeout: 3000,\n\n        pushObject: function (object) {\n            // object can be either a DS.Model or a plain JS object, so when working with\n            // it, we need to handle both cases.\n\n            // make sure notifications have all the necessary properties set.\n            if (typeof object.toJSON === 'function') {\n                // working with a DS.Model\n\n                if (object.get('location') === '') {\n                    object.set('location', 'bottom');\n                }\n            }\n            else {\n                if (!object.location) {\n                    object.location = 'bottom';\n                }\n            }\n\n            this._super(object);\n        },\n        handleNotification: function (message, delayed) {\n            if (!message.status) {\n                message.status = 'passive';\n            }\n\n            if (!delayed) {\n                this.pushObject(message);\n            } else {\n                this.delayedNotifications.push(message);\n            }\n        },\n        showError: function (message, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            this.handleNotification({\n                type: 'error',\n                message: message\n            }, options.delayed);\n        },\n        showErrors: function (errors, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            for (var i = 0; i < errors.length; i += 1) {\n                this.showError(errors[i].message || errors[i], { doNotClosePassive: true });\n            }\n        },\n        showAPIError: function (resp, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            options.defaultErrorText = options.defaultErrorText || 'There was a problem on the server, please try again.';\n\n            if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.error) {\n                this.showError(resp.jqXHR.responseJSON.error, options);\n            } else if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.errors) {\n                this.showErrors(resp.jqXHR.responseJSON.errors, options);\n            } else if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.message) {\n                this.showError(resp.jqXHR.responseJSON.message, options);\n            } else {\n                this.showError(options.defaultErrorText, { doNotClosePassive: true });\n            }\n        },\n        showInfo: function (message, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            this.handleNotification({\n                type: 'info',\n                message: message\n            }, options.delayed);\n        },\n        showSuccess: function (message, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            this.handleNotification({\n                type: 'success',\n                message: message\n            }, options.delayed);\n        },\n        // @Todo this function isn't referenced anywhere. Should it be removed?\n        showWarn: function (message, options) {\n            options = options || {};\n\n            if (!options.doNotClosePassive) {\n                this.closePassive();\n            }\n\n            this.handleNotification({\n                type: 'warn',\n                message: message\n            }, options.delayed);\n        },\n        displayDelayed: function () {\n            var self = this;\n\n            self.delayedNotifications.forEach(function (message) {\n                self.pushObject(message);\n            });\n            self.delayedNotifications = [];\n        },\n        closeNotification: function (notification) {\n            var self = this;\n\n            if (notification instanceof Notification) {\n                notification.deleteRecord();\n                notification.save().finally(function () {\n                    self.removeObject(notification);\n                });\n            } else {\n                this.removeObject(notification);\n            }\n        },\n        closePassive: function () {\n            this.set('content', this.rejectBy('status', 'passive'));\n        },\n        closePersistent: function () {\n            this.set('content', this.rejectBy('status', 'persistent'));\n        },\n        closeAll: function () {\n            this.clear();\n        }\n    });\n\n    __exports__[\"default\"] = Notifications;\n  });",
    "define(\"ghost/utils/set-scroll-classname\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // ## scrollShadow\n    // This adds a 'scroll' class to the targeted element when the element is scrolled\n    // `this` is expected to be a jQuery-wrapped element\n    // **target:** The element in which the class is applied. Defaults to scrolled element.\n    // **class-name:** The class which is applied.\n    // **offset:** How far the user has to scroll before the class is applied.\n    var setScrollClassName = function (options) {\n        var $target = options.target || this,\n            offset = options.offset,\n            className = options.className || 'scrolling';\n\n        if (this.scrollTop() > offset) {\n            $target.addClass(className);\n        } else {\n            $target.removeClass(className);\n        }\n    };\n\n    __exports__[\"default\"] = setScrollClassName;\n  });",
    "define(\"ghost/utils/text-field\", \n  [],\n  function() {\n    \"use strict\";\n    Ember.TextField.reopen({\r\n        attributeBindings: ['autofocus']\r\n    });\n  });",
    "define(\"ghost/utils/titleize\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var lowerWords = ['of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but', 'is', 'if',\n                      'then', 'else', 'when', 'at', 'from', 'by', 'on', 'off', 'for',\n                      'in', 'out', 'over', 'to', 'into', 'with'];\n\n    function titleize(input) {\n        var words = input.split(' ').map(function (word, index) {\n            if (index === 0 || lowerWords.indexOf(word) === -1) {\n                word = Ember.String.capitalize(word);\n            }\n\n            return word;\n        });\n\n        return words.join(' ');\n    }\n\n    __exports__[\"default\"] = titleize;\n  });",
    "define(\"ghost/utils/validator-extensions\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function init() {\n        // Provide a few custom validators\n        //\n        validator.extend('empty', function (str) {\n            return Ember.isBlank(str);\n        });\n\n        validator.extend('notContains', function (str, badString) {\n            return !_.contains(str, badString);\n        });\n    }\n\n    __exports__[\"default\"] = {\n        init: init\n    };\n  });",
    "define(\"ghost/utils/word-count\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = function (s) {\n        s = s.replace(/(^\\s*)|(\\s*$)/gi, ''); // exclude  start and end white-space\n        s = s.replace(/[ ]{2,}/gi, ' '); // 2 or more space to 1\n        s = s.replace(/\\n /gi, '\\n'); // exclude newline with a start spacing\n        s = s.replace(/\\n+/gi, '\\n');\n        return s.split(/ |\\n/).length;\n    }\n  });",
    "define(\"ghost/validators/forgotten\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ForgotValidator = Ember.Object.create({\n        check: function (model) {\n            var data = model.getProperties('email'),\n                validationErrors = [];\n\n            if (!validator.isEmail(data.email)) {\n                validationErrors.push({\n                    message: 'Invalid email address'\n                });\n            }\n\n            return validationErrors;\n        }\n    });\n\n    __exports__[\"default\"] = ForgotValidator;\n  });",
    "define(\"ghost/validators/new-user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NewUserValidator = Ember.Object.extend({\n        check: function (model) {\n            var data = model.getProperties('name', 'email', 'password'),\n                validationErrors = [];\n\n            if (!validator.isLength(data.name, 1)) {\n                validationErrors.push({\n                    message: 'Please enter a name.'\n                });\n            }\n\n            if (!validator.isEmail(data.email)) {\n                validationErrors.push({\n                    message: 'Invalid Email.'\n                });\n            }\n\n            if (!validator.isLength(data.password, 8)) {\n                validationErrors.push({\n                    message: 'Password must be at least 8 characters long.'\n                });\n            }\n\n            return validationErrors;\n        }\n    });\n\n    __exports__[\"default\"] = NewUserValidator;\n  });",
    "define(\"ghost/validators/post\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PostValidator = Ember.Object.create({\n        check: function (model) {\n            var validationErrors = [],\n\n                title = model.get('title');\n\n            if (validator.empty(title)) {\n                validationErrors.push({\n                    message: 'You must specify a title for the post.'\n                });\n            }\n\n            return validationErrors;\n        }\n    });\n\n    __exports__[\"default\"] = PostValidator;\n  });",
    "define(\"ghost/validators/reset\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ResetValidator = Ember.Object.create({\n        check: function (model) {\n\n            var data = model.getProperties('passwords'),\n                p1 = data.passwords.newPassword,\n                p2 = data.passwords.ne2Password,\n                validationErrors = [];\n\n            if (!validator.equals(p1, p2)) {\n                validationErrors.push({\n                    message: 'The two new passwords don\\'t match.'\n                });\n            }\n\n            if (!validator.isLength(p1, 8)) {\n                validationErrors.push({\n                    message: 'The password is not long enough.'\n                });\n            }\n            return validationErrors;\n        }\n    });\n\n    __exports__[\"default\"] = ResetValidator;\n  });",
    "define(\"ghost/validators/setting\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingValidator = Ember.Object.create({\n        check: function (model) {\n            var validationErrors = [],\n                title = model.get('title'),\n                description = model.get('description'),\n                email = model.get('email'),\n                postsPerPage = model.get('postsPerPage');\n\n            if (!validator.isLength(title, 0, 150)) {\n                validationErrors.push({ message: 'Title is too long' });\n            }\n\n            if (!validator.isLength(description, 0, 200)) {\n                validationErrors.push({ message: 'Description is too long' });\n            }\n\n            if (!validator.isEmail(email) || !validator.isLength(email, 0, 254)) {\n                validationErrors.push({ message: 'Please supply a valid email address' });\n            }\n\n            if (!validator.isInt(postsPerPage) || postsPerPage > 1000) {\n                validationErrors.push({ message: 'Please use a number less than 1000' });\n            }\n\n            if (!validator.isInt(postsPerPage) || postsPerPage < 0) {\n                validationErrors.push({ message: 'Please use a number greater than 0' });\n            }\n\n            return validationErrors;\n        }\n    });\n\n    __exports__[\"default\"] = SettingValidator;\n  });",
    "define(\"ghost/validators/setup\", \n  [\"ghost/validators/new-user\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NewUserValidator = __dependency1__[\"default\"];\n\n    var SetupValidator = NewUserValidator.extend({\n        check: function (model) {\n            var data = model.getProperties('blogTitle'),\n                validationErrors = this._super(model);\n\n            if (!validator.isLength(data.blogTitle, 1)) {\n                validationErrors.push({\n                    message: 'Please enter a blog title.'\n                });\n            }\n\n            return validationErrors;\n        }\n    }).create();\n\n    __exports__[\"default\"] = SetupValidator;\n  });",
    "define(\"ghost/validators/signin\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SigninValidator = Ember.Object.create({\n        check: function (model) {\n            var data = model.getProperties('identification', 'password'),\n                validationErrors = [];\n\n            if (!validator.isEmail(data.identification)) {\n                validationErrors.push('Invalid Email');\n            }\n\n            if (!validator.isLength(data.password || '', 1)) {\n                validationErrors.push('Please enter a password');\n            }\n\n            return validationErrors;\n        }\n    });\n\n    __exports__[\"default\"] = SigninValidator;\n  });",
    "define(\"ghost/validators/signup\", \n  [\"ghost/validators/new-user\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NewUserValidator = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = NewUserValidator.create();\n  });",
    "define(\"ghost/validators/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var UserValidator = Ember.Object.create({\n        check: function (model) {\n            var validator = this.validators[model.get('status')];\n\n            if (typeof validator !== 'function') {\n                return [];\n            }\n\n            return validator(model);\n        },\n\n        validators: {\n            invited: function (model) {\n                var validationErrors = [],\n                    email = model.get('email'),\n                    roles = model.get('roles');\n\n                if (!validator.isEmail(email)) {\n                    validationErrors.push({ message: 'Please supply a valid email address' });\n                }\n\n                if (roles.length < 1) {\n                    validationErrors.push({ message: 'Please select a role' });\n                }\n\n                return validationErrors;\n            },\n\n            active: function (model) {\n                var validationErrors = [],\n                    name = model.get('name'),\n                    bio = model.get('bio'),\n                    email = model.get('email'),\n                    location = model.get('location'),\n                    website = model.get('website');\n\n                if (!validator.isLength(name, 0, 150)) {\n                    validationErrors.push({ message: 'Name is too long' });\n                }\n\n                if (!validator.isLength(bio, 0, 200)) {\n                    validationErrors.push({ message: 'Bio is too long' });\n                }\n\n                if (!validator.isEmail(email)) {\n                    validationErrors.push({ message: 'Please supply a valid email address' });\n                }\n\n                if (!validator.isLength(location, 0, 150)) {\n                    validationErrors.push({ message: 'Location is too long' });\n                }\n\n                if (!_.isEmpty(website) &&\n                    (!validator.isURL(website, { protocols: ['http', 'https'], require_protocol: true }) ||\n                    !validator.isLength(website, 0, 2000))) {\n\n                    validationErrors.push({ message: 'Website is not a valid url' });\n                }\n\n                return validationErrors;\n            }\n        }\n    });\n\n    __exports__[\"default\"] = UserValidator;\n  });",
    "define(\"ghost/views/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ApplicationView = Ember.View.extend({\n\n        setupCloseSidebar: function () {\n\n            // #### Navigating within the sidebar closes it.\n            $(document).on('click', '.js-close-sidebar', function () {\n                $('body').removeClass('off-canvas');\n            });\n\n            // #### Add the blog URL to the <a> version of the ghost logo\n            $('.ghost-logo-link').attr('href', this.get('controller.ghostPaths').blogRoot);\n\n        }.on('didInsertElement'),\n        \n        actions: {\n            //Sends the user to the front if they're not on mobile,\n            //otherwise toggles the sidebar.\n            toggleSidebarOrGoHome: function () {\n                if (window.matchMedia('(max-width: 650px)').matches) {\n                    $('body').toggleClass('off-canvas');\n                }\n                else {\n                    window.location = this.get('controller.ghostPaths').blogRoot;\n                }\n            }\n        }\n    });\n\n    __exports__[\"default\"] = ApplicationView;\n  });",
    "define(\"ghost/views/content-list-content-view\", \n  [\"ghost/utils/set-scroll-classname\",\"ghost/mixins/pagination-view-infinite-scroll\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var setScrollClassName = __dependency1__[\"default\"];\n    var PaginationViewMixin = __dependency2__[\"default\"];\n\n\n    var PostsListView = Ember.View.extend(PaginationViewMixin, {\n        classNames: ['content-list-content'],\n\n        didInsertElement: function () {\n            this._super();\n            var el = this.$();\n            el.on('scroll', Ember.run.bind(el, setScrollClassName, {\n                target: el.closest('.content-list'),\n                offset: 10\n            }));\n        }\n    });\n\n    __exports__[\"default\"] = PostsListView;\n  });",
    "define(\"ghost/views/content-preview-content-view\", \n  [\"ghost/utils/set-scroll-classname\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var setScrollClassName = __dependency1__[\"default\"];\n\n    var PostContentView = Ember.View.extend({\n        classNames: ['content-preview-content'],\n\n        didInsertElement: function () {\n            var el = this.$();\n            el.on('scroll', Ember.run.bind(el, setScrollClassName, {\n                target: el.closest('.content-preview'),\n                offset: 10\n            }));\n        },\n\n        willDestroyElement: function () {\n            var el = this.$();\n            el.off('scroll');\n        }\n    });\n\n    __exports__[\"default\"] = PostContentView;\n  });",
    "define(\"ghost/views/editor-save-button\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var EditorSaveButtonView = Ember.View.extend({\n        templateName: 'editor-save-button',\n        tagName: 'section',\n        classNames: ['js-publish-splitbutton'],\n        classNameBindings: ['isDangerous:splitbutton-delete:splitbutton-save'],\n\n        //Tracks whether we're going to change the state of the post on save\n        isDangerous: function () {\n            return this.get('controller.isPublished') !== this.get('controller.willPublish');\n        }.property('controller.isPublished', 'controller.willPublish'),\n\n        'save-text': function () {\n            return this.get('controller.willPublish') ? this.get('publish-text') : this.get('draft-text');\n        }.property('controller.willPublish'),\n\n        'publish-text': function () {\n            return this.get('controller.isPublished') ? 'Update Post' : 'Publish Now';\n        }.property('controller.isPublished'),\n\n        'draft-text': function () {\n            return this.get('controller.isPublished') ? 'Unpublish' : 'Save Draft';\n        }.property('controller.isPublished')\n    });\n\n    __exports__[\"default\"] = EditorSaveButtonView;\n  });",
    "define(\"ghost/views/editor/edit\", \n  [\"ghost/mixins/editor-base-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EditorViewMixin = __dependency1__[\"default\"];\n\n    var EditorView = Ember.View.extend(EditorViewMixin, {\n        tagName: 'section',\n        classNames: ['entry-container']\n    });\n\n    __exports__[\"default\"] = EditorView;\n  });",
    "define(\"ghost/views/editor/new\", \n  [\"ghost/mixins/editor-base-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EditorViewMixin = __dependency1__[\"default\"];\n\n    var EditorNewView = Ember.View.extend(EditorViewMixin, {\n        tagName: 'section',\n        templateName: 'editor/edit',\n        classNames: ['entry-container']\n    });\n\n    __exports__[\"default\"] = EditorNewView;\n  });",
    "define(\"ghost/views/item-view\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ItemView = Ember.View.extend({\n        classNameBindings: ['active'],\n\n        active: function () {\n            return this.get('childViews.firstObject.active');\n        }.property('childViews.firstObject.active')\n    });\n\n    __exports__[\"default\"] = ItemView;\n  });",
    "define(\"ghost/views/post-item-view\", \n  [\"ghost/views/item-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var itemView = __dependency1__[\"default\"];\n\n    var PostItemView = itemView.extend({\n        classNameBindings: ['isFeatured:featured', 'isPage:page'],\n\n        isFeatured: Ember.computed.alias('controller.model.featured'),\n\n        isPage: Ember.computed.alias('controller.model.page'),\n        \n        //Edit post on double click\n        doubleClick: function () {\n            this.get('controller').send('openEditor', this.get('controller.model'));\n        }\n        \n    });\n\n    __exports__[\"default\"] = PostItemView;\n  });",
    "define(\"ghost/views/post-settings-menu-view\", \n  [\"ghost/utils/date-formatting\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global moment */\n    var formatDate = __dependency1__.formatDate;\n\n    var PostSettingsMenuView = Ember.View.extend({\n        templateName: 'post-settings-menu',\n        publishedAtBinding: Ember.Binding.oneWay('controller.publishedAt'),\n        datePlaceholder: function () {\n            return formatDate(moment());\n        }.property('controller.publishedAt')\n    });\n\n    __exports__[\"default\"] = PostSettingsMenuView;\n  });",
    "define(\"ghost/views/post-tags-input\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PostTagsInputView = Ember.View.extend({\n        tagName: 'section',\n        elementId: 'entry-tags',\n        classNames: 'left',\n\n        templateName: 'post-tags-input',\n\n        hasFocus: false,\n\n        keys: {\n            BACKSPACE: 8,\n            TAB: 9,\n            ENTER: 13,\n            ESCAPE: 27,\n            UP: 38,\n            DOWN: 40,\n            NUMPAD_ENTER: 108,\n            COMMA: 188\n        },\n\n        didInsertElement: function () {\n            this.get('controller').send('loadAllTags');\n        },\n\n        willDestroyElement: function () {\n            this.get('controller').send('reset');\n        },\n\n        overlayStyles: function () {\n            var styles = [],\n                leftPos;\n\n            if (this.get('hasFocus') && this.get('controller.suggestions.length')) {\n                leftPos = this.$().find('#tags').position().left;\n                styles.push('display: block');\n                styles.push('left: ' + leftPos + 'px');\n            } else {\n                styles.push('display: none');\n                styles.push('left', 0);\n            }\n\n            return styles.join(';');\n        }.property('hasFocus', 'controller.suggestions.length'),\n\n\n        tagInputView: Ember.TextField.extend({\n            focusIn: function () {\n                this.get('parentView').set('hasFocus', true);\n            },\n\n            focusOut: function () {\n                this.get('parentView').set('hasFocus', false);\n\n                // if (!Ember.isEmpty(this.get('value'))) {\n                //     this.get('parentView.controller').send('addNewTag');\n                // }\n            },\n\n            keyDown: function (event) {\n                var controller = this.get('parentView.controller'),\n                    keys = this.get('parentView.keys'),\n                    hasValue;\n\n                switch (event.keyCode) {\n                    case keys.UP:\n                        event.preventDefault();\n                        controller.send('selectPreviousSuggestion');\n                        break;\n\n                    case keys.DOWN:\n                        event.preventDefault();\n                        controller.send('selectNextSuggestion');\n                        break;\n\n                    case keys.TAB:\n                    case keys.ENTER:\n                    case keys.NUMPAD_ENTER:\n                    case keys.COMMA:\n                        if (event.keyCode === keys.COMMA && event.shiftKey) {\n                            break;\n                        }\n\n                        if (controller.get('selectedSuggestion')) {\n                            event.preventDefault();\n                            controller.send('addSelectedSuggestion');\n                        } else {\n                            // allow user to tab out of field if input is empty\n                            hasValue = !Ember.isEmpty(this.get('value'));\n                            if (hasValue || event.keyCode !== keys.TAB) {\n                                event.preventDefault();\n                                controller.send('addNewTag');\n                            }\n                        }\n                        break;\n\n                    case keys.BACKSPACE:\n                        if (Ember.isEmpty(this.get('value'))) {\n                            event.preventDefault();\n                            controller.send('deleteLastTag');\n                        }\n                        break;\n\n                    case keys.ESCAPE:\n                        event.preventDefault();\n                        controller.send('reset');\n                        break;\n                }\n            }\n        }),\n\n\n        tagView: Ember.View.extend({\n            tagName: 'span',\n            classNames: 'tag',\n\n            tag: null,\n\n            click: function () {\n                this.get('parentView.controller').send('deleteTag', this.get('tag'));\n            }\n        }),\n\n\n        suggestionView: Ember.View.extend({\n            tagName: 'li',\n            classNameBindings: 'suggestion.selected',\n\n            suggestion: null,\n\n            // we can't use the 'click' event here as the focusOut event on the\n            // input will fire first\n\n            mouseDown: function (event) {\n                event.preventDefault();\n            },\n\n            mouseUp: function (event) {\n                event.preventDefault();\n                this.get('parentView.controller').send('addTag',\n                    this.get('suggestion.tag'));\n            },\n        })\n    });\n\n    __exports__[\"default\"] = PostTagsInputView;\n  });",
    "define(\"ghost/views/posts\", \n  [\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var mobileQuery = __dependency1__.mobileQuery;\n    var responsiveAction = __dependency1__.responsiveAction;\n\n    var PostsView = Ember.View.extend({\n        target: Ember.computed.alias('controller'),\n        classNames: ['content-view-container'],\n        tagName: 'section',\n\n        mobileInteractions: function () {\n            Ember.run.scheduleOnce('afterRender', this, function () {\n                var self = this;\n\n                $(window).resize(function () {\n                    if (!mobileQuery.matches) {\n                        self.send('resetContentPreview');\n                    }\n                });\n\n                // ### Add the blog URL to the <a> version of the ghost logo\n                $('.ghost-logo-link').attr('href', this.get('controller.ghostPaths').blogRoot);\n\n                // ### Show content preview when swiping left on content list\n                $('.manage').on('click', '.content-list ol li', function (event) {\n                    responsiveAction(event, '(max-width: 800px)', function () {\n                        self.send('showContentPreview');\n                    });\n                });\n\n                // ### Hide content preview\n                $('.manage').on('click', '.content-preview .button-back', function (event) {\n                    responsiveAction(event, '(max-width: 800px)', function () {\n                        self.send('hideContentPreview');\n                    });\n                });\n            });\n        }.on('didInsertElement'),\n    });\n\n    __exports__[\"default\"] = PostsView;\n  });",
    "define(\"ghost/views/settings\", \n  [\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var mobileQuery = __dependency1__.mobileQuery;\n\n    var SettingsView = Ember.View.extend({\n        classNames: ['wrapper'],\n        // used by SettingsContentBaseView and on resize to mobile from desktop\n        showSettingsContent: function () {\n            if (mobileQuery.matches) {\n                $('.settings-sidebar').animate({right: '100%', left: '-110%', 'margin-right': '15px'}, 300);\n                $('.settings-content').animate({right: '0', left: '0', 'margin-left': '0'}, 300);\n                $('.settings-header-inner').css('display', 'block');\n            }\n        },\n        // used by SettingsIndexView\n        showSettingsMenu: function () {\n            if (mobileQuery.matches) {\n                $('.settings-header-inner').css('display', 'none');\n                $('.settings-sidebar').animate({right: '0', left: '0', 'margin-right': '0'}, 300);\n                $('.settings-content').animate({right: '-100%', left: '100%', 'margin-left': '15'}, 300);\n            }\n        },\n        showAll: function () {\n            //Remove any styles applied by jQuery#animate\n            $('.settings-sidebar, .settings-content').removeAttr('style');\n        },\n\n        mobileInteractions: function () {\n            this.set('changeLayout', _.bind(function changeLayout(mq) {\n                if (mq.matches) {\n                    //transitioned to mobile layout, so show content\n                    this.showSettingsContent();\n                } else {\n                    //went from mobile to desktop\n                    this.showAll();\n                }\n            }, this));\n            mobileQuery.addListener(this.changeLayout);\n        }.on('didInsertElement'),\n\n        removeMobileInteractions: function () {\n            mobileQuery.removeListener(this.changeLayout);\n        }.on('willDestroyElement')\n    });\n\n    __exports__[\"default\"] = SettingsView;\n  });",
    "define(\"ghost/views/settings/apps\", \n  [\"ghost/views/settings/content-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BaseView = __dependency1__[\"default\"];\n\n    var SettingsAppsView = BaseView.extend();\n\n    __exports__[\"default\"] = SettingsAppsView;\n  });",
    "define(\"ghost/views/settings/content-base\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n     * All settings views other than the index should inherit from this base class.\n     * It ensures that the correct screen is showing when a mobile user navigates\n     * to a `settings.someRouteThatIsntIndex` route.\n     */\n\n    var SettingsContentBaseView = Ember.View.extend({\n        tagName: 'section',\n        classNames: ['settings-content', 'fade-in'],\n        showContent: function () {\n            this.get('parentView').showSettingsContent();\n        }.on('didInsertElement')\n    });\n\n    __exports__[\"default\"] = SettingsContentBaseView;\n  });",
    "define(\"ghost/views/settings/general\", \n  [\"ghost/views/settings/content-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BaseView = __dependency1__[\"default\"];\n\n    var SettingsGeneralView = BaseView.extend();\n\n    __exports__[\"default\"] = SettingsGeneralView;\n  });",
    "define(\"ghost/views/settings/index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingsIndexView = Ember.View.extend({\n        //Ensure that going to the index brings the menu into view on mobile.\n        showMenu: function () {\n            this.get('parentView').showSettingsMenu();\n        }.on('didInsertElement')\n    });\n\n    __exports__[\"default\"] = SettingsIndexView;\n  });",
    "define(\"ghost/views/settings/users\", \n  [\"ghost/views/settings/content-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BaseView = __dependency1__[\"default\"];\n\n    var SettingsUsersView = BaseView.extend();\n\n    __exports__[\"default\"] = SettingsUsersView;\n  });",
    "define(\"ghost/views/settings/users/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingsUserView = Ember.View.extend({\n        currentUser: Ember.computed.alias('controller.session.user'),\n        \n        isNotOwnProfile: Ember.computed('controller.user.id', 'currentUser.id', function () {\n            return this.get('controller.user.id') !== this.get('currentUser.id');\n        }),\n        \n        isNotOwnersProfile: Ember.computed.not('controller.user.isOwner'),\n        \n        canAssignRoles: Ember.computed.or('currentUser.isAdmin', 'currentUser.isOwner'),\n\n        canMakeOwner: Ember.computed.and('currentUser.isOwner', 'isNotOwnProfile', 'controller.user.isAdmin'),\n        \n        rolesDropdownIsVisible: Ember.computed.and('isNotOwnProfile', 'canAssignRoles', 'isNotOwnersProfile'),\n\n        deleteUserActionIsVisible: Ember.computed('currentUser', 'canAssignRoles', 'controller.user', function () {\n            if ((this.get('canAssignRoles') && this.get('isNotOwnProfile') && !this.get('controller.user.isOwner')) ||\n                (this.get('currentUser.isEditor') && (!this.get('isNotOwnProfile') ||\n                this.get('controller.user.isAuthor')))) {\n                return true;\n            }\n        }),\n\n        userActionsAreVisible: Ember.computed.or('deleteUserActionIsVisible', 'canMakeOwner')\n\n    });\n\n    __exports__[\"default\"] = SettingsUserView;\n  });",
    "define(\"ghost/views/settings/users/users-list-view\", \n  [\"ghost/mixins/pagination-view-infinite-scroll\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    //import setScrollClassName from 'ghost/utils/set-scroll-classname';\n    var PaginationViewMixin = __dependency1__[\"default\"];\n\n    var UsersListView = Ember.View.extend(PaginationViewMixin, {\n        classNames: ['settings-users']\n    });\n\n    __exports__[\"default\"] = UsersListView;\n  });",
    "// Loader to create the Ember.js application\n/*global require */\n\nwindow.App = require('ghost/app')['default'].create();"
  ]
}